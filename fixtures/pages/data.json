[
{
  "model": "pages.articleindexpage",
  "pk": 4,
  "fields": {
    "body": "[]"
  }
},
{
  "model": "pages.articlepage",
  "pk": 6,
  "fields": {
    "body": "[{\"id\": \"d716dbed-7f85-4593-9232-2fa4388092dd\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"j4opv\\\">This is a tutorial about one way to build and deploy a Wagtail CMS site to <a href=\\\"https://www.pythonanywhere.com/\\\">PythonAnywhere</a>.</h2><p data-block-key=\\\"5kmsd\\\">It&#x27;s a <i>starting point</i> that has most of the elements one might need (backend and frontend) to build a Wagtail site and deploy it live. It&#x27;s by no means a complete site, in fact I&#x27;ve intentionally left out a lot of the things that make a site unique, such as the design, content, and custom code so that you can use this as a starting point for your own site.</p><p data-block-key=\\\"3lj8u\\\">I recommend you read:</p><p data-block-key=\\\"17t6h\\\">The official <a href=\\\"https://wagtail.org/\\\">Wagtail documentation</a> and <a href=\\\"https://docs.wagtail.org/en/stable/\\\">Developer Documentation</a>, specifically <a href=\\\"https://docs.wagtail.org/en/stable/getting_started/tutorial.html\\\">Your first wagtail site</a></p><p data-block-key=\\\"42jc7\\\">I wanted to document the process I go through. I&#x27;ve actually built and deployed a fair few Wagtail sites over the last decade using various hosting platforms, as a freelancer. I now work for <a href=\\\"https://torchbox.com/\\\">Torchbox</a> as a developer.</p><ul><li data-block-key=\\\"6ftgk\\\">\\u2705 Python:3.10</li><li data-block-key=\\\"5qi52\\\">\\u2705 Mysql Database</li><li data-block-key=\\\"9pjvi\\\">\\u2705 Node / webpack to build the frontend</li><li data-block-key=\\\"9kbos\\\">\\u2705 CI actions for code checks</li><li data-block-key=\\\"fq2sv\\\">\\u2705 Pre-commit to run git hooks</li><li data-block-key=\\\"7iett\\\">\\u2705 Wagtail CMS v5.1.1</li><li data-block-key=\\\"3rl1v\\\">\\u2705 Django 4.2</li></ul><p data-block-key=\\\"9oh7i\\\">The code <a href=\\\"https://github.com/wagtail-examples/tutorial-deploy-pythonanywhere-paid\\\">here</a> is the complete source code after following the tutorial.</p><p data-block-key=\\\"4k8jo\\\"><a id=\\\"26\\\" linktype=\\\"page\\\">Part 2</a> - Has optional steps to add front end code, code quality checks and CI checks.</p>\"}, {\"id\": \"0d206651-7ee3-49fa-be07-c432c966b7cb\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"407ux\\\">Because I&#x27;m using git push to deploy the webapp and that requires SSH access, I am using a paid account on PythonAnywhere, which starts at \\u20ac5/month.</p>\"}]",
    "excerpt": "A guide to building a basic Wagtail CMS and deploying it to PythonAnywhere",
    "date": "2023-09-02"
  }
},
{
  "model": "pages.articlepage",
  "pk": 26,
  "fields": {
    "body": "[{\"id\": \"dafc466a-f9ef-4897-8682-0658c1f3c763\", \"type\": \"heading\", \"value\": {\"level\": \"h2\", \"heading\": \"Part 2 of Deploy Wagtail CMS to PythonAnywhere\"}}, {\"id\": \"13ba48fb-8a72-4539-ad54-0339d1bafe75\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"b4w8n\\\">Following on from <a id=\\\"6\\\" linktype=\\\"page\\\">Deploy Wagtail CMS to PythonAnywhere</a> the chapters here add some basic frontend styles and scripts.</p><p data-block-key=\\\"7mhb9\\\">The main purpose is to show how to setup Webpack to compile styles and scripts ready for production.</p>\"}, {\"id\": \"3a3994ae-acca-4c56-afe7-7389ae79a34a\", \"type\": \"image_aligned_block\", \"value\": {\"image\": 2, \"content\": \"\", \"alignment\": \"center\"}}]",
    "excerpt": "Setting up Webpack to compile styles and scripts ready for production.",
    "date": "2023-09-02"
  }
},
{
  "model": "pages.articlepage",
  "pk": 33,
  "fields": {
    "body": "[{\"id\": \"3a729ba6-61a8-46a6-9ef7-f7ba5ec36419\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"rh3yc\\\">Installation</h2><p data-block-key=\\\"d293b\\\">Clone this repository: <a href=\\\"https://github.com/wagtail-examples/dependency-checker\\\">https://github.com/wagtail-examples/dependency-checker</a> to a suitable location on your computer.</p><h2 data-block-key=\\\"3h5sl\\\">Limitations</h2><ul><li data-block-key=\\\"asmf9\\\">Only works if the app is using a Dockerfile that uses poetry to manage dependencies.</li></ul><h2 data-block-key=\\\"6ptoc\\\">Requirements</h2><ul><li data-block-key=\\\"boq2l\\\">Docker installed and running. Try: <a href=\\\"https://orbstack.dev\\\">https://orbstack.dev</a></li><li data-block-key=\\\"8o8ht\\\">Python 3.9+</li></ul><h2 data-block-key=\\\"9jbe8\\\">Usage</h2>\"}, {\"id\": \"30c2b8b0-a82a-43f0-8f03-f793d1c21a19\", \"type\": \"code\", \"value\": {\"code\": \"poetry install\\r\\npoetry run start\", \"language\": \"bash\"}}, {\"id\": \"0768b9fe-a3d8-44ad-9d90-c50fa5f72e13\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"5sduo\\\">Enter the url for your repository and set any options where the default isn&#x27;t right for your app.</p><h3 data-block-key=\\\"rpi6\\\">Options</h3><p data-block-key=\\\"dr14q\\\">Options can be passed in as command line arguments or enter them when prompted.</p>\"}, {\"id\": \"9f03d885-a91e-4e2c-b181-2ee5f76d3ff2\", \"type\": \"code\", \"value\": {\"code\": \"poetry run start --help\\r\\n\\r\\n--repo-url - The URL of the repository to clone/check\\r\\n--branch-name - The branch to checkout [master]\\r\\n--docker-file-name - The name of the Dockerfile to inspect/use [Dockerfile]\\r\\n--docker-file-location - The location of the Dockerfile to inspect/use relative to the repository root [./]\", \"language\": \"bash\"}}, {\"id\": \"9e2a50e0-a3f5-4eec-bdd1-e0ce8893416f\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"7fa6n\\\">How it works</h2><ul><li data-block-key=\\\"96ecr\\\">It will clone the repository and checkout the specified branch</li><li data-block-key=\\\"eqmr2\\\">It will then inspect the Dockerfile to find the python image version and poetry version used</li><li data-block-key=\\\"aqlre\\\">It will then build a new image based on the Dockerfile image and export the dependency list using poetry export -&gt; requirements-frozen.txt</li><li data-block-key=\\\"8g5os\\\">It will then compare each dependency version in requirements-frozen.txt with the latest version on PyPi</li><li data-block-key=\\\"fdhei\\\">It will then output the results in the console and indicate if there are any outdated dependencies and/or manual checks required</li></ul>\"}, {\"id\": \"1cbc99d9-dd32-4469-81fc-901cd028744e\", \"type\": \"image_aligned_block\", \"value\": {\"image\": 4, \"content\": \"<h3 data-block-key=\\\"3lip4\\\">Example console output</h3>\", \"alignment\": \"center\"}}]",
    "excerpt": "Output a report of outdated dependencies for your python app",
    "date": "2023-09-02"
  }
},
{
  "model": "pages.articlepage",
  "pk": 34,
  "fields": {
    "body": "[{\"id\": \"63f26538-d5ea-4b24-9d19-8430f8386d4c\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"7d51r\\\">Why?</h2><p data-block-key=\\\"c6ujj\\\">As with any software It&#x27;s a good idea to keep the version you are using as up to date as possible. Wagtail has a frequent release policy in place: <a href=\\\"https://docs.wagtail.org/en/stable/releases/upgrading.html#\\\">https://docs.wagtail.org/en/stable/releases/upgrading.html#</a> Some releases change how features you may already be using should be implemented. <i>Always follow the upgrading documentation for the release you are upgrading to.</i></p><p data-block-key=\\\"cdra3\\\">However, confirming all is well can be a challenge and finding pieces of a site that aren&#x27;t working is hard. For example checking every content type in the admin and frontend still works as expected can be very time consuming.</p><p data-block-key=\\\"djpli\\\">I created this management command that can be run in development.</p><p data-block-key=\\\"ben5k\\\">It will find all content types (Pages, Snippets, Settings, Images, Documents) and output a report in the console for each content type. You will need to update <i>registered_modeladmin</i> to suit your own app.</p><p data-block-key=\\\"4hq02\\\">When running the command you&#x27;ll need to specify 2 params (a username and a password), create this with python manage.py createsuperuser</p><p data-block-key=\\\"1i72s\\\">The report will assume http://localhost:8000 is to be used in the report. If you see an error the url for the error should be available to copy and paste into a browser for further investigation. You can override the url value to use in the console by passing in --report-url option.</p>\"}, {\"id\": \"baf91b69-5a98-4466-8e2c-8433ce540ef3\", \"type\": \"code\", \"value\": {\"code\": \"# app-name/management/commands/report_responses.py\\r\\n\\r\\nimport requests\\r\\nfrom django.apps import apps\\r\\nfrom django.conf import settings\\r\\nfrom django.core.management.base import BaseCommand\\r\\nfrom wagtail.admin.admin_url_finder import AdminURLFinder\\r\\nfrom wagtail.admin.utils import get_admin_base_url\\r\\nfrom wagtail.contrib.settings.registry import registry as settings_registry\\r\\nfrom wagtail.documents import get_document_model\\r\\nfrom wagtail.images import get_image_model\\r\\nfrom wagtail.models import get_page_models\\r\\nfrom wagtail.snippets.models import get_snippet_models\\r\\n\\r\\n\\r\\nclass Command(BaseCommand):\\r\\n    \\\"\\\"\\\"\\r\\n    Checks the admin and frontend responses for models incl pages, snippets, settings and modeladmin.\\r\\n\\r\\n    The command is only available in DEBUG mode. Set DEBUG=True in your settings to enable it.\\r\\n\\r\\n    Basic usage:\\r\\n        python manage.py report_responses <username> <password>\\r\\n\\r\\n    Options:\\r\\n\\r\\n        --host\\r\\n            The URL to check. Defaults to the value of ADMIN_BASE_URL in settings.\\r\\n\\r\\n        --report-url\\r\\n            The URL to use for the report. e.g. http://staging.example.com\\r\\n\\r\\n    Example:\\r\\n        python manage.py report_responses <username> <password> \\\\\\r\\n            --report-url http://staging.example.com\\r\\n\\r\\n        This will alter the displayed URLs in the report but the tested URL will still\\r\\n        use the --host option.\\r\\n    \\\"\\\"\\\"\\r\\n\\r\\n    help = \\\"Checks the admin and frontend responses for models including pages, snippets, settings and modeladmin.\\\"\\r\\n\\r\\n    checked_url = None\\r\\n    report_url = None\\r\\n    report_lines = []\\r\\n\\r\\n    registered_modeladmin = [\\r\\n        # add model admin models as they cannot be auto detected. For example ...\\r\\n        \\\"events.EventType\\\",\\r\\n    ]\\r\\n\\r\\n    def add_arguments(self, parser):\\r\\n        parser.add_argument(\\r\\n            \\\"username\\\",\\r\\n            help=\\\"The username to use for login\\\",\\r\\n        )\\r\\n        parser.add_argument(\\r\\n            \\\"password\\\",\\r\\n            help=\\\"The password to use for login\\\",\\r\\n        )\\r\\n        parser.add_argument(\\r\\n            \\\"--host\\\",\\r\\n            default=get_admin_base_url(),\\r\\n            help=\\\"The URL to check\\\",\\r\\n        )\\r\\n        parser.add_argument(\\r\\n            \\\"--report-url\\\",\\r\\n            help=\\\"The URL to use for the report. e.g. http://staging.example.com\\\",\\r\\n        )\\r\\n\\r\\n    def handle(self, *args, **options):\\r\\n        # Check if the command is enabled in settings\\r\\n        if not settings.DEBUG:\\r\\n            self.out_message_error(\\r\\n                \\\"Command is only available in DEBUG mode. Set DEBUG=True in your settings to enable it.\\\"\\r\\n            )\\r\\n            return\\r\\n\\r\\n        self.checked_url = options[\\\"host\\\"]\\r\\n        self.report_url = (\\r\\n            options[\\\"report_url\\\"].strip(\\\"/\\\") if options[\\\"report_url\\\"] else None\\r\\n        )\\r\\n\\r\\n        with requests.Session() as session:\\r\\n            url = f\\\"{options['host']}/admin/login/\\\"\\r\\n\\r\\n            try:\\r\\n                session.get(url)\\r\\n            except requests.exceptions.ConnectionError:\\r\\n                self.out_message_error(\\r\\n                    f\\\"Could not connect to {options['host']}. Is the server running?\\\"\\r\\n                )\\r\\n                return\\r\\n            except requests.exceptions.InvalidSchema:\\r\\n                self.out_message_error(\\r\\n                    f\\\"Could not connect to {options['host']}. Invalid schema\\\"\\r\\n                )\\r\\n                return\\r\\n            except requests.exceptions.MissingSchema:\\r\\n                self.out_message_error(\\r\\n                    f\\\"Could not connect to {options['host']}. Missing schema\\\"\\r\\n                )\\r\\n                return\\r\\n\\r\\n            # Attempt to log in\\r\\n            logged_in = session.post(\\r\\n                url,\\r\\n                data=dict(\\r\\n                    username=options[\\\"username\\\"],\\r\\n                    password=options[\\\"password\\\"],\\r\\n                    csrfmiddlewaretoken=session.cookies[\\\"csrftoken\\\"],\\r\\n                    next=\\\"/admin/\\\",\\r\\n                ),\\r\\n            ).content\\r\\n\\r\\n            if \\\"Forgotten password?\\\" in logged_in.decode(\\\"utf-8\\\"):\\r\\n                # Login failed because the response isn't the Dashboard page\\r\\n                self.out_message_error(\\r\\n                    f\\\"Could not log in to {options['host']}. Is the username and password correct?\\\"\\r\\n                )\\r\\n                return\\r\\n\\r\\n            # Reports\\r\\n            self.report_admin_home(session, options)\\r\\n            self.report_page(session, options)\\r\\n            self.report_snippets(session, options)\\r\\n            self.report_modeladmin(session, options)\\r\\n            self.report_settings_models(session, options)\\r\\n            self.report_documents(session, options)\\r\\n            self.report_images(session, options)\\r\\n\\r\\n    def report_admin_home(self, session, options):\\r\\n        self.out_message_info(\\\"\\\\nChecking the admin home page (Dashboard) ...\\\")\\r\\n\\r\\n        admin_home_resp = session.get(f\\\"{options['host']}/admin/\\\")\\r\\n\\r\\n        if admin_home_resp.status_code == 200:\\r\\n            message = \\\"\\\\nAdmin home page \\u2193\\\"\\r\\n            self.out_message(message)\\r\\n            self.out_message_success(f\\\"{options['host']}/admin/ \\u2190 200\\\")\\r\\n        else:\\r\\n            message = \\\"\\\\nAdmin home page \\u2193\\\"\\r\\n            self.out_message(message)\\r\\n            self.out_message_error(\\r\\n                f\\\"{options['host']}/admin/ \\u2190 {admin_home_resp.status_code}\\\"\\r\\n            )\\r\\n\\r\\n    def report_page(self, session, options):\\r\\n        page_models = self.filter_page_models(get_page_models())\\r\\n\\r\\n        model_index = []\\r\\n        results = []\\r\\n\\r\\n        for page_model in page_models:\\r\\n            if item := page_model.objects.first():\\r\\n                model_index.append(item.__class__.__name__)\\r\\n                results.append(\\r\\n                    {\\r\\n                        \\\"title\\\": item.title,\\r\\n                        \\\"url\\\": f\\\"{options['host']}{item.url}\\\",\\r\\n                        \\\"id\\\": item.id,\\r\\n                        \\\"editor_url\\\": f\\\"{self.get_admin_edit_url(options, item)}\\\",\\r\\n                        \\\"class_name\\\": item.__class__.__name__,\\r\\n                    }\\r\\n                )\\r\\n\\r\\n        # Print the index\\r\\n        message = f\\\"\\\\nChecking the admin and frontend responses of {len(results)} page types ...\\\"\\r\\n        self.out_message_info(message)\\r\\n\\r\\n        for count, content_type in enumerate(sorted(model_index)):\\r\\n            message = (\\r\\n                f\\\" {count + 1}. {content_type}\\\"\\r\\n                if count <= 8  # Fixup the index number alignment\\r\\n                else f\\\"{count + 1}. {content_type}\\\"\\r\\n            )\\r\\n            self.out_message(message)\\r\\n\\r\\n        # Print the results\\r\\n        for page in results:\\r\\n            message = f\\\"\\\\n{page['title']} ( {page['class_name']} ) \\u2193\\\"\\r\\n            self.out_message(message)\\r\\n\\r\\n            # Check the admin response\\r\\n            response = session.get(page[\\\"editor_url\\\"])\\r\\n            if response.status_code != 200:\\r\\n                self.out_message_error(f\\\"{page['editor_url']} \\u2190 {response.status_code}\\\")\\r\\n            else:\\r\\n                self.out_message_success(f\\\"{page['editor_url']} \\u2190 200\\\")\\r\\n\\r\\n            # Check the frontend response\\r\\n            response = session.get(page[\\\"url\\\"])\\r\\n            if response.status_code == 200:\\r\\n                self.out_message_success(f\\\"{page['url']} \\u2190 200\\\")\\r\\n            else:\\r\\n                if response.status_code == 404:\\r\\n                    message = (\\r\\n                        f\\\"{page['url']} \\u2190 {response.status_code} probably a draft page\\\"\\r\\n                    )\\r\\n                    self.out_message_warning(message)\\r\\n                else:\\r\\n                    self.out_message_error(f\\\"{page['url']} \\u2190 {response.status_code}\\\")\\r\\n\\r\\n    def report_snippets(self, session, options):\\r\\n        self.out_message_info(\\\"\\\\nChecking all SNIPPETS models edit pages ...\\\")\\r\\n\\r\\n        snippet_models = get_snippet_models()\\r\\n        self.out_models(session, options, snippet_models)\\r\\n\\r\\n    def report_modeladmin(self, session, options):\\r\\n        self.out_message_info(\\\"\\\\nChecking all MODELADMIN edit pages ...\\\")\\r\\n\\r\\n        modeladmin_models = []\\r\\n        for model in apps.get_models():\\r\\n            app = model._meta.app_label\\r\\n            name = model.__name__\\r\\n            if f\\\"{app}.{name}\\\" in self.registered_modeladmin:\\r\\n                modeladmin_models.append(apps.get_model(app, name))\\r\\n\\r\\n        self.out_models(session, options, modeladmin_models)\\r\\n\\r\\n    def report_settings_models(self, session, options):\\r\\n        self.out_message_info(\\\"\\\\nChecking all SETTINGS edit pages ...\\\")\\r\\n        self.out_models(session, options, settings_registry)\\r\\n\\r\\n    def report_documents(self, session, options):\\r\\n        self.out_message_info(\\\"\\\\nChecking the DOCUMENTS edit page ...\\\")\\r\\n\\r\\n        document_model = get_document_model()\\r\\n        self.out_models(session, options, [document_model])\\r\\n\\r\\n    def report_images(self, session, options):\\r\\n        self.out_message_info(\\\"\\\\nChecking the IMAGES edit page ...\\\")\\r\\n\\r\\n        image_model = get_image_model()\\r\\n        self.out_models(session, options, [image_model])\\r\\n\\r\\n    def out_models(self, session, options, models):\\r\\n        for model in models:\\r\\n            obj = model.objects.first()\\r\\n            if not obj:\\r\\n                # settings model has no objects\\r\\n                continue\\r\\n\\r\\n            url = self.get_admin_edit_url(options, obj)\\r\\n\\r\\n            message = f\\\"\\\\n{model._meta.verbose_name.capitalize()} \\u2193\\\"\\r\\n            self.out_message(message)\\r\\n\\r\\n            response = session.get(url)\\r\\n\\r\\n            if response.status_code == 200:\\r\\n                self.out_message_success(f\\\"{url} \\u2190 200\\\")\\r\\n            else:\\r\\n                self.out_message_error(f\\\"{url} \\u2190 {response.status_code}\\\")\\r\\n\\r\\n    def out_message(self, message):\\r\\n        if self.report_url:\\r\\n            message = message.replace(self.checked_url, self.report_url)\\r\\n        if message not in self.report_lines:\\r\\n            self.report_lines.append(message)\\r\\n        self.stdout.write(message)\\r\\n\\r\\n    def out_message_info(self, message):\\r\\n        if self.report_url:\\r\\n            message = message.replace(self.checked_url, self.report_url)\\r\\n        if message not in self.report_lines:\\r\\n            self.report_lines.append(message)\\r\\n        self.stdout.write(self.style.HTTP_INFO(message))\\r\\n        self.stdout.write(\\\"=\\\" * len(message))\\r\\n\\r\\n    def out_message_error(self, message):\\r\\n        if self.report_url:\\r\\n            message = message.replace(self.checked_url, self.report_url)\\r\\n        if message not in self.report_lines:\\r\\n            self.report_lines.append(message)\\r\\n        self.stderr.write(self.style.ERROR(message))\\r\\n\\r\\n    def out_message_success(self, message):\\r\\n        if self.report_url:\\r\\n            message = message.replace(self.checked_url, self.report_url)\\r\\n        if message not in self.report_lines:\\r\\n            self.report_lines.append(message)\\r\\n        self.stdout.write(self.style.SUCCESS(message))\\r\\n\\r\\n    def out_message_warning(self, message):\\r\\n        if self.report_url:\\r\\n            message = message.replace(self.checked_url, self.report_url)\\r\\n        if message not in self.report_lines:\\r\\n            self.report_lines.append(message)\\r\\n        self.stdout.write(self.style.WARNING(message))\\r\\n\\r\\n    @staticmethod\\r\\n    def filter_page_models(page_models):\\r\\n        \\\"\\\"\\\"Filter out page models that are not creatable or are in the core apps.\\\"\\\"\\\"\\r\\n\\r\\n        filtered_page_models = []\\r\\n\\r\\n        for page_model in page_models:\\r\\n            if page_model._meta.app_label == \\\"wagtailcore\\\":\\r\\n                # Skip the core apps\\r\\n                continue\\r\\n            if not page_model.is_creatable:\\r\\n                # Skip pages that can't be created\\r\\n                continue\\r\\n            filtered_page_models.append(page_model)\\r\\n\\r\\n        return filtered_page_models\\r\\n\\r\\n    @staticmethod\\r\\n    def get_admin_edit_url(options, obj):\\r\\n        admin_url_finder = AdminURLFinder()\\r\\n        return f\\\"{options['host']}{admin_url_finder.get_edit_url(obj)}\\\"\", \"language\": \"python\"}}, {\"id\": \"ddeac16a-f4cd-4083-bcb2-c2cab7ba3a51\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"50jrp\\\">Example usage scenario</h3><p data-block-key=\\\"2s9fs\\\">Wagtail 3 has had some extensive changes over previous verions: <a href=\\\"https://docs.wagtail.org/en/stable/releases/3.0.html\\\">Documentation</a></p><p data-block-key=\\\"dgoit\\\">Mostly, if you miss renaming an import it can be seen quite quickly when running the site. But some other changes can be hard to spot.</p><p data-block-key=\\\"76nhi\\\">For example:</p>\"}, {\"id\": \"8bf2e368-8f65-43d3-8bdb-09ce40e3c952\", \"type\": \"code\", \"value\": {\"code\": \"class CustomHelpPanel(EditHandler):\\r\\n  template = 'toolkits/custom_help_panel.html'\\r\\n\\r\\n  def render(self):\\r\\n    return mark_safe(render_to_string(self.template, {\\r\\n        'self': self,\\r\\n        'title': self.form.parent_page.title\\r\\n      }))\", \"language\": \"python\"}}, {\"id\": \"4db9f387-d4f5-46a5-afb7-fff178aed232\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"c9t6o\\\">If you have one page model that all pages use/inherit from where the above is used like so:</p>\"}, {\"id\": \"2daa955c-a034-40a4-ac52-1a5952226e7e\", \"type\": \"code\", \"value\": {\"code\": \"content_panels = [\\r\\n  CustomHelpPanel()\\r\\n] + Page.content_panels\", \"language\": \"python\"}}, {\"id\": \"6c605956-d9c0-4da9-9aec-d31d35f866fc\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bskjj\\\">Won&#x27;t show up as an error until you try to edit the page it&#x27;s used on.</p><p data-block-key=\\\"9dh14\\\">But you might just have 1000&#x27;s of pages to potentially check across many different page models.</p><h3 data-block-key=\\\"epk7l\\\">report_responses Command</h3><p data-block-key=\\\"461n7\\\">The command can be dropped into any app folder as per the django management command folder structure and run with:</p>\"}, {\"id\": \"5e229ad6-ccf7-4326-a520-d8ee10743f6c\", \"type\": \"code\", \"value\": {\"code\": \"./manage.py report_responses\", \"language\": \"bash\"}}, {\"id\": \"76dc5779-bf9e-4e84-92e5-04e36a197a01\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6ge1o\\\">Your site will need some content, preferably close to the same content as your live or staging site and will need to be running on your development machine (DEBUG = True)</p>\"}]",
    "excerpt": "This command will find content types and check the response code each of them.",
    "date": "2023-09-02"
  }
},
{
  "model": "pages.articlepage",
  "pk": 35,
  "fields": {
    "body": "[{\"id\": \"4b71a3c5-383c-4f67-9e49-67c7d14494c2\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7dats\\\">This command will find all objects of a specific content type (limited by configuration) and output a report of links to the admin edit pages.</p><h2 data-block-key=\\\"5dksi\\\">Usage</h2><p data-block-key=\\\"1rfac\\\">The command can be dropped into any app folder as per the django management command folder structure and run with:</p>\"}, {\"id\": \"de2daa46-6eb0-4023-93ad-6eac732869f6\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py report_types\", \"language\": \"bash\"}}, {\"id\": \"b8d8e6fb-d0ca-42ce-aaaa-c6ad470f71a5\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"3t62c\\\">How it might be useful:</h3><p data-block-key=\\\"8gqq4\\\">The command is designed to be used locally, during development and will require a good dataset to be most useful (e.g. a copy of the staging/production database)</p><p data-block-key=\\\"fv78q\\\">It is recommended that you run the command with a superuser account.</p><p data-block-key=\\\"3kl0i\\\"><i>Scenario:</i> A client has reported a particular page type is not working as expected in the admin interface. Let&#x27;s assume they mention it&#x27;s a custom page type called FeaturedPage that potentially could only ever be added as a child of a specific page type. It could be time consuming to browse through pages and find a page to test.</p><p data-block-key=\\\"5hd98\\\"><i>Usage: </i>Just run the command to see all content types and then enter the contenttype ID from the list to show admin edit urls for all objects of that type.</p>\"}, {\"id\": \"4414623a-cca3-4896-834d-8f5903b7f84c\", \"type\": \"code\", \"value\": {\"code\": \"# app-name/management/commands/report_types.py\\r\\n\\r\\nfrom django.apps import apps\\r\\nfrom django.conf import settings\\r\\nfrom django.contrib.contenttypes.models import ContentType\\r\\nfrom django.core.management.base import BaseCommand\\r\\nfrom wagtail.admin.admin_url_finder import AdminURLFinder\\r\\nfrom wagtail.admin.utils import get_admin_base_url\\r\\nfrom wagtail.contrib.settings.registry import registry as settings_registry\\r\\nfrom wagtail.models import Page\\r\\nfrom wagtail.snippets.models import get_snippet_models\\r\\n\\r\\n\\r\\nclass Command(BaseCommand):\\r\\n    \\\"\\\"\\\"\\r\\n    Report on content types in the project.\\r\\n\\r\\n    This command will generate a list of all the content types in the project\\r\\n    along with their contenttype ID. The contenttype ID can be entered to generate a report of all\\r\\n    the admin edit pages of that type.\\r\\n\\r\\n    The command is only available in DEBUG mode. Set DEBUG=True in your settings to enable it.\\r\\n\\r\\n    Usage:\\r\\n        python manage.py report_types\\r\\n    \\\"\\\"\\\"\\r\\n\\r\\n    excluded_apps = []\\r\\n\\r\\n    apps_prefix = \\\"\\\" # optional [your-project-directory]\\r\\n\\r\\n    registered_modeladmin = [\\r\\n        # add model admin models as they cannot be auto detected. For example ...\\r\\n        \\\"events.EventType\\\",\\r\\n    ]\\r\\n\\r\\n    def add_arguments(self, parser):\\r\\n        parser.add_argument(\\r\\n            \\\"--host\\\",\\r\\n            default=get_admin_base_url(),\\r\\n            help=\\\"The URL to check\\\",\\r\\n        )\\r\\n\\r\\n    def handle(self, *args, **options):\\r\\n        \\\"\\\"\\\"Report on content types in the project.\\\"\\\"\\\"\\r\\n\\r\\n        if not settings.DEBUG:\\r\\n            self.out_message_warning(\\r\\n                \\\"Command is only available in DEBUG mode. Set DEBUG=True in your settings to enable it.\\\"\\r\\n            )\\r\\n            return\\r\\n\\r\\n        self.out_message_warning(\\\"\\\\nUsing this command:\\\")\\r\\n        self.out_message(\\\"Enter a C-Type ID from the list below\\\")\\r\\n        self.out_message(\\\"to view a report of all the admin edit pages of that type.\\\")\\r\\n\\r\\n        content_types = ContentType.objects.filter(\\r\\n            app_label__in=self.get_apps_for_report(self.apps_prefix, self.excluded_apps)\\r\\n        ).order_by(\\\"model\\\", \\\"app_label\\\")\\r\\n\\r\\n        if not content_types:\\r\\n            self.out_message_warning(\\\"No content types found.\\\")\\r\\n            return\\r\\n\\r\\n        # Generate the index\\r\\n        content_type_pages = self.get_contenttype_for_pages(content_types)\\r\\n        content_type_snippets = self.get_contenttype_for_snippets(content_types)\\r\\n        content_type_modeladmin = self.get_contenttypes_for_modeladmin(content_types)\\r\\n        content_type_settings = self.get_contenttypes_for_settings(content_types)\\r\\n\\r\\n        all_content_types = {\\r\\n            **content_type_pages,\\r\\n            **content_type_snippets,\\r\\n            **content_type_modeladmin,\\r\\n            **content_type_settings,\\r\\n        }\\r\\n\\r\\n        if not all(all_content_types):\\r\\n            self.out_message_error(\\\"No content types found.\\\")\\r\\n            return\\r\\n\\r\\n        self.out_table(content_type_pages, \\\"Page\\\")\\r\\n        self.out_table(content_type_snippets, \\\"Snippet\\\")\\r\\n        self.out_table(content_type_modeladmin, \\\"ModelAdmin\\\")\\r\\n        self.out_table(content_type_settings, \\\"Settings\\\")\\r\\n\\r\\n        # Get the index and generate the report\\r\\n        try:\\r\\n            index = int(input(\\\"\\\\nC-Type ID: \\\"))\\r\\n        except ValueError:\\r\\n            self.out_message_error(\\\"Value must be an integer.\\\")\\r\\n            return\\r\\n\\r\\n        if index not in all_content_types:\\r\\n            self.out_message_error(f\\\"Invalid C-Type ID: {index}\\\")\\r\\n            return\\r\\n\\r\\n        self.out_edit_links(options, all_content_types[index])\\r\\n\\r\\n    def get_contenttypes_for_settings(self, content_types):\\r\\n        content_type_settings = dict()\\r\\n        settings_models = []\\r\\n        for model in settings_registry:\\r\\n            settings_models.append(\\r\\n                f\\\"{model._meta.app_label}.{model._meta.model_name}\\\".lower()\\r\\n            )\\r\\n\\r\\n        for content_type in content_types:\\r\\n            model_str = f\\\"{content_type.app_label}.{content_type.model}\\\"\\r\\n            if model_str in settings_models:\\r\\n                content_type_settings[content_type.id] = [\\r\\n                    content_type.model_class().__name__,\\r\\n                    content_type.app_label,\\r\\n                ]\\r\\n\\r\\n        return content_type_settings\\r\\n\\r\\n    def get_contenttypes_for_modeladmin(self, content_types):\\r\\n        content_type_modeladmin = dict()\\r\\n        modeladmin_models = [model.lower() for model in self.registered_modeladmin]\\r\\n\\r\\n        for content_type in content_types:\\r\\n            model_str = f\\\"{content_type.app_label}.{content_type.model}\\\"\\r\\n            if model_str in modeladmin_models:\\r\\n                content_type_modeladmin[content_type.id] = [\\r\\n                    content_type.model_class().__name__,\\r\\n                    content_type.app_label,\\r\\n                ]\\r\\n\\r\\n        return content_type_modeladmin\\r\\n\\r\\n    def get_contenttype_for_snippets(self, content_types):\\r\\n        content_type_snippets = dict()\\r\\n        snippet_models = [model.__name__.lower() for model in get_snippet_models()]\\r\\n\\r\\n        for content_type in content_types:\\r\\n            if content_type.model in snippet_models:\\r\\n                content_type_snippets[content_type.id] = [\\r\\n                    content_type.model_class().__name__,\\r\\n                    content_type.app_label,\\r\\n                ]\\r\\n\\r\\n        return content_type_snippets\\r\\n\\r\\n    def get_contenttype_for_pages(self, content_types):\\r\\n        content_type_pages = dict()\\r\\n\\r\\n        for content_type in content_types:\\r\\n            if issubclass(content_type.model_class(), Page):\\r\\n                content_type_pages[content_type.id] = [\\r\\n                    content_type.model_class().__name__,\\r\\n                    content_type.app_label,\\r\\n                ]\\r\\n\\r\\n        return content_type_pages\\r\\n\\r\\n    def out_table(self, data, model_type=None):\\r\\n        self.out_message_info(f\\\"\\\\nIndex of {model_type} Types\\\")\\r\\n\\r\\n        headers = [\\\"Model\\\", \\\"App\\\", \\\"C-Type ID\\\"]\\r\\n        max_col_width = self.calc_col_width(data)\\r\\n\\r\\n        self.out_message(\\\"-\\\" * max_col_width * len(headers))\\r\\n        self.out_message(\\r\\n            \\\" \\\".join([f\\\"{header: <{max_col_width}}\\\" for header in headers])\\r\\n        )\\r\\n        self.out_message(\\\"-\\\" * max_col_width * len(headers))\\r\\n\\r\\n        for key, row in data.items():\\r\\n            self.out_message(\\r\\n                \\\" \\\".join([f\\\"{col: <{max_col_width}}\\\" for col in row]) + f\\\" {key}\\\"\\r\\n            )\\r\\n\\r\\n        self.out_message(\\\"-\\\" * max_col_width * len(headers))\\r\\n\\r\\n    def calc_col_width(self, data):\\r\\n        max_col_width = 0\\r\\n        for row in data.values():\\r\\n            for col in row:\\r\\n                if len(col) > max_col_width:\\r\\n                    max_col_width = len(col)\\r\\n\\r\\n        max_col_width += 2  # add some right padding\\r\\n        return max_col_width\\r\\n\\r\\n    def out_edit_links(self, options, data):\\r\\n        model = apps.get_model(data[1], data[0])\\r\\n        objects = model.objects.all()\\r\\n\\r\\n        self.out_message_success(f\\\"\\\\nEdit Links for {data[0]}\\\")\\r\\n        self.out_message(\\\"-\\\" * 70)\\r\\n\\r\\n        title_field = None\\r\\n\\r\\n        if hasattr(model, \\\"title\\\"):\\r\\n            title_field = \\\"title\\\"\\r\\n        elif hasattr(model, \\\"name\\\"):\\r\\n            title_field = \\\"name\\\"\\r\\n\\r\\n        for obj in objects:\\r\\n            if title_field:\\r\\n                t = getattr(obj, title_field)\\r\\n                title = t[:30] + \\\"...\\\" if len(t) > 30 else t\\r\\n                self.out_message(f\\\"{title}\\\")\\r\\n            self.out_message(f\\\"{self.get_admin_edit_url(options, obj)}\\\\n\\\\n\\\")\\r\\n\\r\\n    def out_message_warning(self, message):\\r\\n        self.stdout.write(self.style.WARNING(message))\\r\\n\\r\\n    def out_message(self, message):\\r\\n        self.stdout.write(message)\\r\\n\\r\\n    def out_message_error(self, message):\\r\\n        self.stdout.write(self.style.ERROR(message))\\r\\n\\r\\n    def out_message_info(self, message):\\r\\n        self.stdout.write(self.style.HTTP_INFO(message))\\r\\n\\r\\n    def out_message_success(self, message):\\r\\n        self.stdout.write(self.style.SUCCESS(message))\\r\\n\\r\\n    @staticmethod\\r\\n    def get_admin_edit_url(options, obj):\\r\\n        admin_url_finder = AdminURLFinder()\\r\\n        return f\\\"{options['host']}{admin_url_finder.get_edit_url(obj)}\\\"\\r\\n\\r\\n    @staticmethod\\r\\n    def get_apps_for_report(apps_prefix=None, excluded_apps=[]):\\r\\n        \\\"\\\"\\\"Return a list of apps we care about for the page types report.\\\"\\\"\\\"\\r\\n\\r\\n        if not apps_prefix:\\r\\n            apps = [\\r\\n                app\\r\\n                for app in settings.INSTALLED_APPS\\r\\n                if not app.split(\\\".\\\")[0] in excluded_apps\\r\\n            ]\\r\\n            return apps\\r\\n\\r\\n        return [\\r\\n            app.split(\\\".\\\")[1]\\r\\n            for app in settings.INSTALLED_APPS\\r\\n            if app.startswith(apps_prefix)\\r\\n        ]\", \"language\": \"python\"}}]",
    "excerpt": "The command will find all objects of a specific content type (limited by configuration) and output a report of links to the admin edit pages.",
    "date": "2023-09-02"
  }
},
{
  "model": "pages.articlepage",
  "pk": 36,
  "fields": {
    "body": "[{\"id\": \"7ecc75e5-bcfa-45f0-9079-a729783903ac\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"uuf5i\\\">Use this CLI to start a new Wagtail CMS site.</h2><p data-block-key=\\\"dvjlh\\\">Options:</p><ul><li data-block-key=\\\"1kg61\\\">Remove the default welcome page</li><li data-block-key=\\\"59sm6\\\">Add node and npm to the project</li><li data-block-key=\\\"6bdg8\\\">Add webpack to the project</li></ul><p data-block-key=\\\"8k2uv\\\">It uses the Wagtail start command and then alters the sites folder and file layout. Optionally, you can also include a basic webpack setup to build and compile the front end code.</p><p data-block-key=\\\"a63f4\\\">The site will include only a base home page and is ready for development.</p><p data-block-key=\\\"64b6u\\\">Download: <a href=\\\" https://github.com/nickmoreton/wagtail-start \\\"> https://github.com/nickmoreton/wagtail-start </a></p><h2 data-block-key=\\\"fua4q\\\">Installation</h2>\"}, {\"id\": \"0d27990e-acc5-4455-a02d-2f69930d422e\", \"type\": \"code\", \"value\": {\"code\": \"poetry install\", \"language\": \"bash\"}}, {\"id\": \"733f07a1-9416-4a54-aa94-755cb8c0f50c\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"7vn2k\\\">Usage</h3>\"}, {\"id\": \"a9cef8b8-506b-45f8-b435-8afeabbdc49e\", \"type\": \"code\", \"value\": {\"code\": \"poetry run new [project_name]\", \"language\": \"bash\"}}, {\"id\": \"9c6733a9-7ea3-4919-8c84-069d367927d2\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"1kv20\\\">The project will be created in it&#x27;s own directory inside the parent directory of the CLI tool.</p><h2 data-block-key=\\\"2lngf\\\">New site development</h2><p data-block-key=\\\"5bd36\\\">Once the site is generated, you can start developing it further.</p><h3 data-block-key=\\\"587tj\\\">Backend</h3><p data-block-key=\\\"2bhp\\\">Install the dependencies, use your preferred method of setting up a virtual environment.</p><p data-block-key=\\\"1tfq5\\\">Run</p>\"}, {\"id\": \"47bbfb2b-7ff1-40be-8724-5d9f67b4de13\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py migrate\\r\\npython manage.py createsuperuser\\r\\npython manage.py runserver\", \"language\": \"bash\"}}, {\"id\": \"9716eba7-6964-442c-86b9-1312399aea2b\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"55fr7\\\">Frontend</h3><ol><li data-block-key=\\\"105vj\\\">Install the dependencies: (<i>nvm</i> use if you have nvm installed) and <i>npm install</i>.</li><li data-block-key=\\\"99adb\\\">Run the dev server: npm start.</li><li data-block-key=\\\"db1im\\\">Open the site in your browser: http://localhost:3000.</li><li data-block-key=\\\"f8a9t\\\">For production build: npm run build.</li></ol>\"}]",
    "excerpt": "Generate a starter Wagtail site that includes a basic frontend web pack setup",
    "date": "2023-09-22"
  }
},
{
  "model": "pages.articlepage",
  "pk": 37,
  "fields": {
    "body": "[]",
    "excerpt": "",
    "date": "2023-09-30"
  }
},
{
  "model": "pages.articlepage",
  "pk": 39,
  "fields": {
    "body": "[{\"id\": \"c10fe1b4-0fb9-4ab7-8f6b-6a4c9909d1bd\", \"type\": \"heading\", \"value\": {\"level\": \"h2\", \"heading\": \"A Wagtail quick-start template\"}}, {\"id\": \"4e6761ed-deda-445f-b988-dcd6cf88d9e4\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"ybzc4\\\">Building on the wagtail start command this template adds:</p><ul><li data-block-key=\\\"droqe\\\">Docker / docker-compose development environment</li><li data-block-key=\\\"7jj7\\\">A choice of Postgresql, Mysql or Sqlite3 database</li><li data-block-key=\\\"9deoa\\\">SASS for css styling</li><li data-block-key=\\\"fv2ss\\\">Pico CSS for almost classless styling</li><li data-block-key=\\\"6r8v0\\\">esbuild javascript bundler and build system</li><li data-block-key=\\\"2819l\\\">Testing mail server for development</li><li data-block-key=\\\"ds8h3\\\">Database management GUI&#x27;s</li><li data-block-key=\\\"c65m4\\\">Wagtail CMS v6.3</li></ul>\"}, {\"id\": \"853027bb-a330-4ae4-9bfe-bdd8e027e060\", \"type\": \"image_aligned_block\", \"value\": {\"image\": 6, \"content\": \"\", \"alignment\": \"center\"}}, {\"id\": \"4bc10d41-77ea-468c-a2ec-4d0e422fabda\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"xed5n\\\">Includes code adjustments plus a guide to help you get the app deployed to PythonAnywhere.com using a FREE account.</p>\"}, {\"id\": \"19ccebf8-ff28-4294-b0c1-85c7ad97d356\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"psob8\\\">Head on over to: <a href=\\\"https://github.com/wagtail-examples/wagtail-starter-kit\\\">https://github.com/wagtail-examples/wagtail-starter-kit</a> and fork or clone it to your computer.</p><p data-block-key=\\\"716vf\\\">There&#x27;s just one short command to run to get the site running on your development computer.</p>\"}, {\"id\": \"bcd4503c-c8cf-4966-85a8-56e8490e83e0\", \"type\": \"code\", \"value\": {\"code\": \"make quickstart\", \"language\": \"bash\"}}, {\"id\": \"32c77f3c-ab8a-40a5-9f3e-5252f674d408\", \"type\": \"heading\", \"value\": {\"level\": \"h3\", \"heading\": \"Choose a database\"}}, {\"id\": \"69faab26-8b1d-4f1c-ac5d-dd3c56691b8f\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7z5jz\\\">Read about the <a href=\\\"https://github.com/wagtail-examples/wsk-deploy-python-anywhere?tab=readme-ov-file#working-with-the-backend\\\">backend setup</a> and available database types</p><ul><li data-block-key=\\\"4cg3k\\\">Postgresql</li><li data-block-key=\\\"63ef2\\\">Mysql</li><li data-block-key=\\\"eku2n\\\">Sqlite3</li></ul>\"}, {\"id\": \"e92c63fa-1d33-4be8-9c80-161f224bc98e\", \"type\": \"heading\", \"value\": {\"level\": \"h3\", \"heading\": \"Frontend features\"}}, {\"id\": \"58a7b5d4-7a4d-4c90-929c-f9cb11f205f6\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7z5jz\\\">Read about the <a href=\\\"https://github.com/wagtail-examples/wsk-deploy-python-anywhere?tab=readme-ov-file#working-with-the-fronend\\\">frontend setup</a></p><ul><li data-block-key=\\\"disva\\\">Compile Sass</li><li data-block-key=\\\"evtpn\\\">Compile Javascript</li><li data-block-key=\\\"4ne7g\\\">and more...</li></ul>\"}, {\"id\": \"6ce374a8-6f74-4f92-90dd-55de7d189217\", \"type\": \"heading\", \"value\": {\"level\": \"h3\", \"heading\": \"Production Deployment\"}}, {\"id\": \"c1872549-f2c8-440e-88bf-2ef50233c10c\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"xjq8k\\\">Deploy the starter kit: <a href=\\\"https://github.com/wagtail-examples/wsk-deploy-python-anywhere/blob/main/docs/deployment.md\\\">full setup instructions</a></p>\"}]",
    "excerpt": "Clone/fork this repo for an expanded Wagtail quick-start template",
    "date": "2024-12-18"
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 7,
  "fields": {
    "body": "[{\"id\": \"41fa1bc3-eaf2-499b-94a0-ed392ef94063\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"jcfbx\\\">I&#x27;m using Github for this project.</p><p data-block-key=\\\"163ct\\\">Create a new repo on your preferred provider. Github can add some files for you when starting a new project, I decided to add a README file and a gitignore file for Python.</p><p data-block-key=\\\"v2q5\\\">Clone the newly created repo to your local development machine. It will have a remote called origin. Later on I&#x27;ll create a remote called production which I&#x27;ll use to deploy the site to PythonAnywhere.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 8,
  "fields": {
    "body": "[{\"id\": \"88f602f7-791c-4b2f-8d6a-824fc676938b\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"hpdos\\\">Once you have created your PythonAnywhere account, log into it.</p><p data-block-key=\\\"ej8ua\\\">Open the web tab and click the Add a new web app button.</p><p data-block-key=\\\"d3l4i\\\">Choose:</p><ul><li data-block-key=\\\"fjhas\\\">Own domain (I&#x27;m using a domain I own www.nickmoreton.co.uk)</li><li data-block-key=\\\"3jkh2\\\">Manual setup</li><li data-block-key=\\\"56ss2\\\">Python (latest you can choose)</li></ul><p data-block-key=\\\"b8cgl\\\">This will create the webapp and take you to the settings page for the webapp.</p>\"}, {\"id\": \"f15a92ef-399f-4e57-b7ef-36d403534213\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"ibsy0\\\">Configure your domain name</h2><p data-block-key=\\\"f0gfu\\\">Copy the CNAME details and add them to your domain at your providers control panel. <a href=\\\"https://help.pythonanywhere.com/pages/CustomDomains\\\">PA Help</a></p><p data-block-key=\\\"e8gnk\\\">When the DNS changes have propagated you should add an HTTPS certificate and make it the default Force HTTPS enabled.</p>\"}, {\"id\": \"e578d30e-569b-4f61-ac99-bc30728bdb0c\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"aim0l\\\">I find it best to use the full domain, including www for the webapp name. Later on at my domain provider I set up web-forwarding from nickmoreton.co.uk to www.nickmoreton.co.uk</p><p data-block-key=\\\"623pq\\\">It can take a while for DNS changes to be updated for the webapp so you could come back later and complete some of the following steps.</p>\"}, {\"id\": \"94a5c9c1-b90d-4212-90fa-ba5c44d8d987\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"eu9el\\\"><b>Add directories for your webapp</b></p><p data-block-key=\\\"6ja2l\\\">As it&#x27;s possible to host multiple web apps in your PA account, think about naming when choosing your directory/file names</p><p data-block-key=\\\"8m5t3\\\"><b>Source code</b></p><p data-block-key=\\\"c3oq\\\">Open the Files tab navigate to /var/www/sites which should already exist.</p><p data-block-key=\\\"6m64\\\">Create a directory to hold your source code. I named mine nickmoreton.co.uk, this is going to be my live/production website.</p><p data-block-key=\\\"er3ru\\\"><b>Bare repos storage</b></p><p data-block-key=\\\"auqrg\\\">Open the Files tab navigate to your home folder.</p><p data-block-key=\\\"92qj7\\\">Create a directory to hold your bare-repos. I named mine bare-repos Then I added another directory inside bare-repos called nickmoreton.co.uk.git</p><p data-block-key=\\\"45g16\\\"><b>Environment variables storage</b></p><p data-block-key=\\\"bnd4r\\\">Open the Files tab navigate to your home folder.</p><p data-block-key=\\\"37hk4\\\">Create a directory to hold your environment variables. I called mine .env-settings then I added another directory inside .env-settings called nickmoreton.co.uk</p><p data-block-key=\\\"1n2pj\\\"><b>Virtual Environments</b></p><p data-block-key=\\\"c1m56\\\">You should create a virtual environment for each webapp. PA makes this straight forward. <a href=\\\"https://help.pythonanywhere.com/pages/Virtualenvs/\\\">PA Help</a></p>\"}, {\"id\": \"8aed0c0a-0bad-44d4-8ad2-f19cf0080ca0\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"7dadf\\\">Create a virtual environment</h2><p data-block-key=\\\"1889r\\\">Open the Consoles tab and open a new bash console.</p><p data-block-key=\\\"52mtq\\\">Use mkvirtualenv to create a new virtual environment. I named mine nickmoreton.co.uk_venv and I&#x27;m using Python 3.10</p>\"}, {\"id\": \"ee4f1fb8-f735-4e84-8fbd-1257f323fa68\", \"type\": \"code\", \"value\": {\"code\": \"mkvirtualenv nickmoreton.co.uk_venv --python=/usr/bin/python3.10\", \"language\": \"bash\"}}, {\"id\": \"2f00648a-899f-4a00-8219-da3417e4424a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"1l969\\\">To confirm the virtual environment has been created run:</p>\"}, {\"id\": \"5c0af363-afa9-4e6a-b6b1-b43d8e8c6664\", \"type\": \"code\", \"value\": {\"code\": \"ls ~/.virtualenvs/nickmoreton.co.uk_venv/\\r\\n> bin lib pyvenv.cfg\", \"language\": \"bash\"}}, {\"id\": \"5cb1712b-c573-433b-999a-d61c76fa2975\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"fkio\\\">Load environment variables when activating the virtual env</h2><p data-block-key=\\\"90qpf\\\">You can manually activate the virtual environment by running:</p><p data-block-key=\\\"ebhdi\\\">workon nickmoreton.co.uk_venv</p><p data-block-key=\\\"5l882\\\">Create a .env file in the environment variables directory created earlier:</p>\"}, {\"id\": \"4eb4f9d5-79c4-4f46-8f4f-6f7f64f5b7ed\", \"type\": \"code\", \"value\": {\"code\": \"touch ~/.env-settings/nickmoreton.co.uk/.env\", \"language\": \"bash\"}}, {\"id\": \"3874a6b0-c2f7-4689-8d82-6f7d0a976bae\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"9hmnn\\\">Later we&#x27;ll add some env vars to this file...</p><p data-block-key=\\\"42ba5\\\">When you activate the virtual environment, environment variables can be loaded for you. You can set this up by running:</p>\"}, {\"id\": \"0475fc58-71d8-45b6-b834-91b2a3bb7b7d\", \"type\": \"code\", \"value\": {\"code\": \"echo \\\"set -a; source ~/.env-settings/nickmoreton.co.uk/.env; set +a\\\" >> ~/.virtualenvs/nickmoreton.co.uk_venv/bin/postactivate\", \"language\": \"bash\"}}, {\"id\": \"630f9bf9-40f8-4204-a6ad-9123ad1414ef\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bu4pk\\\"><a href=\\\"https://help.pythonanywhere.com/pages/environment-variables-for-web-apps/#for-bash-consoles-load-your-env-file-in-your-virtualenv-postactivate-script\\\">PA help</a> about environment variables</p>\"}, {\"id\": \"d4ef1dbc-48d8-4d33-8471-c1eef4597b51\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"7fs22\\\">Set up a git bare repo</h2>\"}, {\"id\": \"f3b58428-d467-4ddc-b1c5-8afdf5f3c44f\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"9xexe\\\">A bare repo is the remote production I&#x27;ll push my main branch to to start a deployment. <a href=\\\"https://blog.pythonanywhere.com/87/\\\">A PA Blog Post</a> about bare repos.</p>\"}, {\"id\": \"076b0400-646e-46d1-9684-a4ae2e5a6e97\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7dj0r\\\">Open the Consoles tab open a new console.</p><p data-block-key=\\\"f0jqd\\\">To initialize the bare repo for a webapp switch to the bare-repos directory:</p>\"}, {\"id\": \"64d72776-e9ef-434a-820b-ccfb49ad8cac\", \"type\": \"code\", \"value\": {\"code\": \"cd ~/bare-repos/nickmoreton.co.uk.git/\", \"language\": \"bash\"}}, {\"id\": \"340f3162-b74b-40d7-a5d8-1cee66d11fc0\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"dovrj\\\">and run:</p>\"}, {\"id\": \"a18c1778-23e4-4463-85ce-0c20bb03d389\", \"type\": \"code\", \"value\": {\"code\": \"git init --bare\", \"language\": \"bash\"}}, {\"id\": \"46c9fa02-1c81-4936-bf16-4dd3de9dc6ef\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"3pm7g\\\"><a href=\\\"https://stackoverflow.com/questions/7632454/how-do-you-use-git-bare-init-repository\\\">Stack Overflow</a> How do you use &quot;git --bare init&quot; repository?</p>\"}, {\"id\": \"b3438edb-7ac6-44ed-a39f-30d7d47b592a\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"34hjl\\\">Create a post-receive hook</h2>\"}, {\"id\": \"8f67a122-6ee7-4d5c-a803-9fa29e85d04f\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"pnl4s\\\">While still in the bare-repos directory for your site.</p>\"}, {\"id\": \"4a4b9847-9337-4bbc-896a-4ccc0aac013e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"5kn03\\\">Create a post-receive hook file:</p>\"}, {\"id\": \"b6cf03fc-a5d1-47f8-abd4-d9e4bccdabfc\", \"type\": \"code\", \"value\": {\"code\": \"touch hooks/post-receive\", \"language\": \"bash\"}}, {\"id\": \"f8193e57-99f0-4268-836d-b1ebb32c775b\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"deufh\\\">then I opened the file in nano:</p>\"}, {\"id\": \"5a6acea1-817b-4054-9a21-2ae3e981cc19\", \"type\": \"code\", \"value\": {\"code\": \"nano hooks/post-receive\", \"language\": \"bash\"}}, {\"id\": \"bc468aaa-2cb1-4e17-8969-0bc06ad33e3b\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"4s55i\\\">and added the following content:</p>\"}, {\"id\": \"a57389de-d37a-4811-9d83-a163686cbe3a\", \"type\": \"code\", \"value\": {\"code\": \"#!/bin/bash\\r\\n\\r\\nwhile read oldrev newrev ref\\r\\ndo\\r\\nif [[ $ref =~ .*/main ]];\\r\\nthen\\r\\n # only the main branch can be deployed\\r\\n\\r\\n # ensure the site directory exists\\r\\n mkdir -p /var/www/sites/nickmoreton.co.uk\\r\\n\\r\\n # checkout the latest version of the site\\r\\n git --work-tree=/var/www/sites/nickmoreton.co.uk --git-dir=/home/wtgi/bare-repos/nickmoreton.co.uk.git checkout -f main\\r\\n\\r\\n # there will be more content added here later ...\\r\\n else\\r\\n echo \\\"Ref $ref successfully received. Doing nothing: only the main branch may be deployed on this server.\\\"\\r\\nfi\\r\\ndone\", \"language\": \"bash\"}}, {\"id\": \"8c69d303-2e62-45d8-98e6-0063e35bd6e1\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"4pa9o\\\">Make the post-receive hook executable</h2><p data-block-key=\\\"ba7ob\\\">In the console run:</p>\"}, {\"id\": \"6f3d8c39-d79f-47db-abb5-b6134edf81ae\", \"type\": \"code\", \"value\": {\"code\": \"chmod +x ~/bare-repos/nickmoreton.co.uk.git/hooks/post-receive\", \"language\": \"bash\"}}, {\"id\": \"07a01a7f-d06e-4fd5-8d59-884ace3cd8f8\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"eagf5\\\">Add the new remote to your local repository</h2><p data-block-key=\\\"8kil4\\\">Substitute my-account-name with your own account name<br/>My account is in the EU so I need to use ssh.eu.pythonanywhere.com</p><p data-block-key=\\\"co5lr\\\">On your local machine in the root of the project run:</p>\"}, {\"id\": \"65e4c42a-46e2-4cb4-a7eb-03c993bf9fc7\", \"type\": \"code\", \"value\": {\"code\": \"git remote add production my-account-name@ssh.eu.pythonanywhere.com:/home/my-account-name/bare-repos/nickmoreton.co.uk.git\", \"language\": \"bash\"}}, {\"id\": \"805736ed-351f-4e0d-b580-636e23bdd860\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"ojqh\\\">Pushing to the remote repo</h2><p data-block-key=\\\"6g8a6\\\">I&#x27;m going to push my main branch to the production remote repo.</p>\"}, {\"id\": \"90941efa-ff37-4809-804c-ec817756f672\", \"type\": \"code\", \"value\": {\"code\": \"git push production main\", \"language\": \"bash\"}}, {\"id\": \"bbc9c23f-99c0-4278-8543-4284d612f11c\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"a0ol8\\\">If you are on another branch and accidentally try to push it to your production remote it will not complete and report the error.</p>\"}, {\"id\": \"4bcc1695-c6b0-41bc-95bf-5a22a0b3d1f6\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"pnl4s\\\">The push has worked because in /var/www/sites/nickmoreton.co.uk I can see the new files.</p><p data-block-key=\\\"3m8lf\\\">The post-receive hook will manage the creation of the webapp directory if it doesn&#x27;t exist and will copy across the current file changes to /var/www/sites/nickmoreton.co.uk</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 9,
  "fields": {
    "body": "[{\"id\": \"157e6619-921f-4bd6-830c-f7ecbb054304\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"p5a9x\\\">Open your project on your local machine.</p>\"}, {\"id\": \"c2759190-b384-42ac-bdc7-5b5d7ff53936\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"g08yl\\\">I&#x27;m using Pipenv to manage the python dependencies, Pipenv isn&#x27;t used on PythonAnywhere. Production dependencies will be in requirements.txt</p>\"}, {\"id\": \"5ef4bb07-7434-41ef-a298-9f7d9f90285b\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6f82\\\">With <a href=\\\"https://pipenv.pypa.io/en/latest/\\\">Pipenv</a> installed run:</p>\"}, {\"id\": \"a7c01979-d186-4184-b24c-d3c084043b85\", \"type\": \"code\", \"value\": {\"code\": \"pipenv install \\\"wagtail>=5.1,<5.2\\\" \\\"mysqlclient>=2.2,<2.3\\\" \\\"python-dotenv>=1.0,<1.1\\\"\", \"language\": \"bash\"}}, {\"id\": \"7bcbe1e4-e2d7-4086-8f57-c4f03c7cd95c\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"8ihln\\\">Then create the requirements file with:</p>\"}, {\"id\": \"d90fb60e-62c5-444a-892b-babaf08a8e08\", \"type\": \"code\", \"value\": {\"code\": \"pipenv requirements > requirements.txt\", \"language\": \"bash\"}}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 10,
  "fields": {
    "body": "[{\"id\": \"fc3d65a5-f6c7-4ce7-81e6-5bafedafc6e7\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"u71yw\\\">Add a .gitignore file so we don&#x27;t commit anything we shouldn&#x27;t.</p><p data-block-key=\\\"fb5q7\\\">A good example of a python .gitignore file is <a href=\\\"https://github.com/github/gitignore/blob/main/Python.gitignore\\\">https://github.com/github/gitignore/blob/main/Python.gitignore</a></p><p data-block-key=\\\"d58l0\\\">The .gitignore file should also contain the following at this stage.</p><p data-block-key=\\\"7ikoa\\\">/media</p>\"}, {\"id\": \"1d1bf3de-85f0-40e2-a38f-1488d7857883\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"yq1na\\\">Now create the initial Wagtail site called webapp.</p><p data-block-key=\\\"90h5m\\\"></p>\"}, {\"id\": \"5d0bb2f2-c70a-438d-92c8-b7cecf2f6eae\", \"type\": \"code\", \"value\": {\"code\": \"pipenv run wagtail start webapp\", \"language\": \"bash\"}}, {\"id\": \"fdf4e8a8-bc16-4f44-a45c-f52f7d89359e\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"3l00k\\\">Modify the file and folder layout a little</h2><p data-block-key=\\\"cmrlk\\\">This is my preferred layout for a Wagtail project, it&#x27;s not the same as the official docs.</p><p data-block-key=\\\"5964r\\\"></p>\"}, {\"id\": \"b31b8594-a9bb-47be-a742-65936ab97f9d\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"u71yw\\\">Inside the webapp directory you can delete the following files as they are not used on PythonAnywhere:</p><ul><li data-block-key=\\\"191o6\\\">.dockerignore</li><li data-block-key=\\\"deu1e\\\">Dockefile</li><li data-block-key=\\\"bc39o\\\">requirements.txt</li></ul>\"}, {\"id\": \"48ea35ef-041c-4deb-8281-fe6dfe8b4e54\", \"type\": \"code\", \"value\": {\"code\": \"rm webapp/.dockerignore webapp/Dockerfile webapp/requirements.txt\", \"language\": \"bash\"}}, {\"id\": \"77337179-8de2-4a71-b719-8ecf54f146f8\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"3h3rb\\\">Move the manage.py file to the root of the project: don&#x27;t forget the . at the end</p>\"}, {\"id\": \"b908ff20-e1fa-4d14-bd8a-7f1b18717b86\", \"type\": \"code\", \"value\": {\"code\": \"mv webapp/manage.py .\", \"language\": \"bash\"}}, {\"id\": \"d2bd8f36-dd4a-4142-8e6a-fc77f9443477\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"b5rr7\\\">Move the all the files and folders from the webapp/webapp directory up one level to the webapp directory:</p>\"}, {\"id\": \"34e00e0a-1e91-4ebd-86ae-3f8f5ba1c3e2\", \"type\": \"code\", \"value\": {\"code\": \"mv webapp/webapp/* webapp\", \"language\": \"bash\"}}, {\"id\": \"80b8b4e4-ac1e-4da6-b49d-a181734ff7ee\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bcalb\\\">Delete the empty webapp/webapp directory:</p>\"}, {\"id\": \"3f18fa58-58bc-4655-98d5-7f7b1fca7beb\", \"type\": \"code\", \"value\": {\"code\": \"rm -rf webapp/webapp\", \"language\": \"bash\"}}, {\"id\": \"ef8da042-8e0d-4955-b0c6-237ce85510c9\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"9uqe\\\">Alter import paths and settings</h2><p data-block-key=\\\"e0hel\\\">Open webapp/urls.py and change the import path for:</p>\"}, {\"id\": \"2bb9f887-d218-4877-8c14-259c46b26b0b\", \"type\": \"code\", \"value\": {\"code\": \"from search import views as search_views\\r\\n# to\\r\\nfrom webapp.search import views as search_views\", \"language\": \"python\"}}, {\"id\": \"1599ae6d-4748-4006-979d-78a987d90969\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6fgkc\\\">Open webapp/settings/base.py and change the app names for home and search in INSTALLED_APPS to:</p>\"}, {\"id\": \"36e2d1ab-8402-40d7-90c2-445671c3795d\", \"type\": \"code\", \"value\": {\"code\": \"INSTALLED_APPS = [\\r\\n    \\\"webapp.home\\\",\\r\\n    \\\"webapp.search\\\",\\r\\n    ...\\r\\n]\", \"language\": \"python\"}}, {\"id\": \"f508aac9-0f99-4ab5-ba08-8a132a90cd81\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bbsqj\\\">The project file structure should look like this:</p>\"}, {\"id\": \"87b7a8fe-9a5a-4bd5-8671-72c243617ab4\", \"type\": \"code\", \"value\": {\"code\": \".\\r\\n|\\u2500\\u2500 venv\\r\\n|\\u2500\\u2500 webapp\\r\\n    |\\u2500\\u2500 home\\r\\n    |\\u2500\\u2500 search\\r\\n    |\\u2500\\u2500 settings\\r\\n    |\\u2500\\u2500 static\\r\\n    |\\u2500\\u2500 templates\\r\\n    |\\u2500\\u2500 __init__.py\\r\\n    |\\u2500\\u2500 urls.py\\r\\n    |\\u2500\\u2500 wsgi.py\\r\\n|\\u2500\\u2500 .gitignore\\r\\n|\\u2500\\u2500 manage.py\\r\\n|\\u2500\\u2500 Pipfile\\r\\n|\\u2500\\u2500 Pipfile.lock\\r\\n|\\u2500\\u2500 README.md\\r\\n|\\u2500\\u2500 requirements.txt\", \"language\": \"bash\"}}, {\"id\": \"4b75c822-e2e1-4c09-9362-2fc492a056c0\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"4ljve\\\">Run the Wagtail project locally</h2><p data-block-key=\\\"esj80\\\">Run the Wagtail project locally to check that everything is working as expected:</p>\"}, {\"id\": \"111d13c7-ac25-42a5-be71-707e602b2206\", \"type\": \"code\", \"value\": {\"code\": \"pipenv run python manage.py migrate\\r\\npipenv run python manage.py createsuperuser\\r\\npipenv run python manage.py runserver\", \"language\": \"bash\"}}, {\"id\": \"9f739a88-68fc-4c5a-b3a2-a6b3d5ab9313\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bb14u\\\">Open a browser and go to <a href=\\\"http://localhost:8000/\\\">http://localhost:8000</a> and you should see the default Wagtail home page.</p><p data-block-key=\\\"5p7s5\\\">Open a browser and go to <a href=\\\"http://localhost:8000/admin/\\\">http://localhost:8000/admin/</a> and login with the superuser credentials you just created.</p><p data-block-key=\\\"dg1lf\\\">You can run pipenv shell to activate the virtual environment before running any of the manage.py commands.</p><p data-block-key=\\\"933ri\\\">This will mean pipenv run python manage.py migrate can be run as ./manage.py migrate for example.</p>\"}, {\"id\": \"3d5a6bbf-fade-4071-b140-b290f10d3554\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"h0rex\\\">The site is currently using sqlite3 database but later on it will be swapped out for a Mysql database.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 11,
  "fields": {
    "body": "[{\"id\": \"9c4d95f1-c013-4dd6-b93c-d4ffd48f6a74\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"93elw\\\">To handle the configuration of the Wagtail app and make it convenient to run the app locally and in production I&#x27;ll set up some environment variables.</p>\"}, {\"id\": \"c15d3fa3-9e77-4eea-b93f-7a56823fa649\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"l6awf\\\">Add a .env file which we can safely push to a git repo</h2>\"}, {\"id\": \"520f2d1d-24d3-45e3-9af2-399d3186f94b\", \"type\": \"code\", \"value\": {\"code\": \"touch .env.example\", \"language\": \"bash\"}}, {\"id\": \"b5b50269-860d-4116-bdf9-08df87eb93db\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"fdome\\\">and add the following content</p>\"}, {\"id\": \"d5a5623e-bd32-4998-ba1e-2a38647125a9\", \"type\": \"code\", \"value\": {\"code\": \"MYSQL_ROOT_PASSWORD=webapp\\r\\nMYSQL_DATABASE=webapp\\r\\nMYSQL_USER=webapp\\r\\nMYSQL_PASSWORD=webapp\\r\\nMYSQL_ROOT_HOST='%'\\r\\nMYSQL_HOST='127.0.0.1'\\r\\nMYSQL_PORT=3306\", \"language\": \"bash\"}}, {\"id\": \"69509f5a-f1e1-425c-b3b8-163981874bb1\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"b9gbr\\\">Although these variables aren&#x27;t secret, later on we may add some that are and use it a template to create a .env file next.</p><p data-block-key=\\\"920q0\\\">Copy the environment file to .env</p>\"}, {\"id\": \"055dd867-7f12-4747-96a0-66ab39a6fdf7\", \"type\": \"code\", \"value\": {\"code\": \"cp .env.example .env\", \"language\": \"bash\"}}, {\"id\": \"a55304b8-f0b1-4958-9293-cec3eb25a4d9\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"c2s2l\\\">Before you commit the .env file to git, add it to the .gitignore file so in the future there&#x27;s less risk of committing secrets to git:</p>\"}, {\"id\": \"fa2b00b7-f6b2-4014-9430-08fe02131c0e\", \"type\": \"code\", \"value\": {\"code\": \"echo \\\".env\\\" >> .gitignore\", \"language\": \"bash\"}}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 12,
  "fields": {
    "body": "[{\"id\": \"41d1b85a-a5aa-4c78-a73c-302acb9c5b4b\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"f4e85\\\">As I mentioned, the database will be switched from using sqlite3 to mysql. Here a new docker-compose setup will be added that can be used to spin up the database locally for development.</p>\"}, {\"id\": \"75ee772e-51b9-474f-8d15-4877d7b65465\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"fsr17\\\">Create a docker-compose.yml file in the root of the project and add the following content:</p>\"}, {\"id\": \"f1181c63-95e0-4a26-845d-263c0eec5828\", \"type\": \"code\", \"value\": {\"code\": \"services:\\r\\n  db:\\r\\n    image: mysql:5.7 # version in use on pythonanywhere\\r\\n    command: --default-authentication-plugin=mysql_native_password\\r\\n    env_file:\\r\\n      - .env\\r\\n    ports:\\r\\n      - \\\"3306:3306\\\"\\r\\n    volumes:\\r\\n      - dbdata:/var/lib/mysql\\r\\n    container_name: mysql\\r\\n    healthcheck:\\r\\n      test: [ \\\"CMD\\\", \\\"mysqladmin\\\", \\\"ping\\\", \\\"-h\\\", \\\"localhost\\\" ]\\r\\n      interval: 10s\\r\\n      timeout: 20s\\r\\n      retries: 5\\r\\n\\r\\n  adminer:\\r\\n    image: adminer\\r\\n    ports:\\r\\n      - 8080:8080\\r\\n    depends_on:\\r\\n      db:\\r\\n        condition: service_healthy\\r\\n\\r\\nvolumes:\\r\\n  dbdata:\", \"language\": \"bash\"}}, {\"id\": \"a96fda03-faf9-446c-b334-2f767e92de7f\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bs8h5\\\">You will need docker installed to run the compose file: try <a href=\\\"https://orbstack.dev/\\\">Orbstack</a></p><p data-block-key=\\\"8q25s\\\">From the root of your project run:</p>\"}, {\"id\": \"d6f09a59-083f-4db3-8795-8aec39a3b791\", \"type\": \"code\", \"value\": {\"code\": \"docker-compose up -d\", \"language\": \"bash\"}}, {\"id\": \"98dd3cff-2268-4302-8379-d2a1f49c4c3f\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"cb256\\\">Becuase the .env file is available the running db container will use the MYSQL_... env vars. </p><p data-block-key=\\\"397d5\\\">Therefore the username, password and database name are initialized to <i>webapp</i></p>\"}, {\"id\": \"aed19e7a-52aa-4f22-913e-7dcf264a1dd2\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"57sn0\\\">To check the database is running, open a web browser and go to <a href=\\\"http://localhost:8080/\\\">http://localhost:8080</a> and login with webapp as the username and password. You should see the database named webapp has been created.</p><p data-block-key=\\\"1pfnh\\\">If you already have a mysql server running locally you can probably skip this step.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 13,
  "fields": {
    "body": "[{\"id\": \"0ff7c519-4cb8-4e76-95fb-65660593e00b\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"ru9sg\\\">Open webapp/settings/base.py and find:</p>\"}, {\"id\": \"d4077b53-045f-43ba-8fa2-452a9e5f0ed3\", \"type\": \"code\", \"value\": {\"code\": \"DATABASES = {\\r\\n    \\\"default\\\": {\\r\\n        \\\"ENGINE\\\": \\\"django.db.backends.sqlite3\\\",\\r\\n        \\\"NAME\\\": os.path.join(BASE_DIR, \\\"db.sqlite3\\\"),\\r\\n    }\\r\\n}\", \"language\": \"python\"}}, {\"id\": \"6f998498-e558-4469-b81a-511a4ee240ad\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"545d4\\\">and replace it with:</p>\"}, {\"id\": \"e320af32-ba52-4753-9e01-0b6677b1a3d2\", \"type\": \"code\", \"value\": {\"code\": \"DATABASES = {\\r\\n    \\\"default\\\": {\\r\\n        \\\"ENGINE\\\": \\\"django.db.backends.mysql\\\",\\r\\n        \\\"NAME\\\": env_vars[\\\"MYSQL_DATABASE\\\"] if \\\"MYSQL_DATABASE\\\" in env_vars else \\\"\\\",\\r\\n        \\\"USER\\\": env_vars[\\\"MYSQL_USER\\\"] if \\\"MYSQL_USER\\\" in env_vars else \\\"\\\",\\r\\n        \\\"PASSWORD\\\": env_vars[\\\"MYSQL_PASSWORD\\\"] if \\\"MYSQL_PASSWORD\\\" in env_vars else \\\"\\\",\\r\\n        \\\"HOST\\\": env_vars[\\\"MYSQL_HOST\\\"] if \\\"MYSQL_HOST\\\" in env_vars else \\\"\\\",\\r\\n        \\\"PORT\\\": env_vars[\\\"MYSQL_PORT\\\"] if \\\"MYSQL_PORT\\\" in env_vars else \\\"\\\",\\r\\n    }\\r\\n}\", \"language\": \"python\"}}, {\"id\": \"c196d4b4-32f3-4e5f-8d99-e7ca3ddddc3a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"erdre\\\">Somewhere near the top of base.py add the following:</p>\"}, {\"id\": \"33b37b73-7da8-44dd-9e38-499ebf4054f0\", \"type\": \"code\", \"value\": {\"code\": \"### existing code\\r\\nimport os\\r\\n\\r\\nPROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\\r\\nBASE_DIR = os.path.dirname(PROJECT_DIR)\\r\\n### end existing code\\r\\n\\r\\nenv_vars = os.environ.copy() ### add this line\", \"language\": \"python\"}}, {\"id\": \"61bac2d8-7ca3-4656-b696-e291d0db95d0\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"ta7ec\\\"><i>env_vars</i> will hold all the environment variables and we can use them to connect to the local mysql database.</p><p data-block-key=\\\"ck0qh\\\">In PythonAnywhere those environment variables will be available but that still needs to be setup.</p>\"}, {\"id\": \"4acc1610-4aad-4e9e-8460-e5aec73d57ef\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"1p03i\\\">Add Django &lt; 4.2 as a python dependency</h3><p data-block-key=\\\"egnv4\\\">As python anywhere (on my account) uses Mysql 5.7 and Django v4.2+ requires Mysql v8.0+ the Django version installed needs to be pinned at v4.1</p><p data-block-key=\\\"eihv8\\\"><b><i>You don&#x27;t need to do this if you account is running Mysql 8.0+</i></b></p><p data-block-key=\\\"8sbca\\\">Run the following to add the Django constraint:</p>\"}, {\"id\": \"32d1d4b5-a6cc-463f-af94-1d4f56937f0c\", \"type\": \"code\", \"value\": {\"code\": \"pipenv install \\\"django>=4.1,<4.2\\\"\", \"language\": \"bash\"}}, {\"id\": \"fd3987dc-7b53-4fa8-ae4c-6cfc25826953\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bkuks\\\">then write the dependencies to requirements.txt</p>\"}, {\"id\": \"9f905978-1f12-4da6-992b-ea58c40cf15a\", \"type\": \"code\", \"value\": {\"code\": \"pipenv requirements > requirements.txt\", \"language\": \"bash\"}}, {\"id\": \"6ae19ec3-bb22-41fd-96c7-bea8f53efa7b\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"7retl\\\">Run the Wagtail project locally</h2><p data-block-key=\\\"1fc9q\\\">Run the Wagtail project locally to check that everything is working as expected:</p>\"}, {\"id\": \"9fb347d5-386e-4a45-8d19-5f9b110f017c\", \"type\": \"code\", \"value\": {\"code\": \"pipenv run python manage.py migrate\\r\\npipenv run python manage.py createsuperuser\\r\\npipenv run python manage.py runserver\", \"language\": \"bash\"}}, {\"id\": \"1daef18d-fbfe-45d9-a785-3c53e44abce6\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"570be\\\">Open a browser and go to <a href=\\\"http://localhost:8000/\\\">http://localhost:8000</a> and you should see the default Wagtail home page.</p><p data-block-key=\\\"58m6k\\\">Open a browser and go to <a href=\\\"http://localhost:8000/admin/\\\">http://localhost:8000/admin/</a> and login with the superuser credentials you just created.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 14,
  "fields": {
    "body": "[{\"id\": \"55149dd4-f7f9-4a1c-8d5c-cf1e899cbd59\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"d1vwu\\\">On the Databases tab create a new database. I called mine <i>nickmoreton_co_uk_db</i></p><p data-block-key=\\\"bb8gs\\\">As suggested it&#x27;s best to add a new password for your database if you&#x27;ve not already done so.</p><h2 data-block-key=\\\"3jmh9\\\">Add env vars on PythonAnywhere</h2><p data-block-key=\\\"c6u9b\\\">Earlier on I created a .env file at <i>~/.env-settings/nickmoreton.co.uk</i></p><p data-block-key=\\\"a5bvq\\\">Open the file, you can do this from the Files tab and add the following content.</p>\"}, {\"id\": \"ebf157ca-5b67-4057-92b0-95bf87aed6ce\", \"type\": \"code\", \"value\": {\"code\": \"MYSQL_DATABASE='the-datbase-name-you-just-created'\\r\\nMYSQL_USER='get-this-from-the-databases-tab' # Username\\r\\nMYSQL_PASSWORD='the-password-just-created'\\r\\nMYSQL_HOST='get-this-from-the-databases-tab' # Database host address\\r\\nMYSQL_PORT='3306'\", \"language\": \"bash\"}}, {\"id\": \"2330a053-488b-4b7f-9fc0-f2bc290089fd\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"2derj\\\">While I am editing this file, although not Database related the following can also be added.</p>\"}, {\"id\": \"a804acb0-9d99-44b5-b31b-cfbbffa6ce83\", \"type\": \"code\", \"value\": {\"code\": \"WAGTAIL_SITE_NAME='add-your-sites-name'\\r\\nBASE_URL='http://your-domain.co.uk'\\r\\nDJANGO_SECRET_KEY='add-a-good-secret-key'\\r\\nDJANGO_ALLOWED_HOSTS='your-domain.co.uk'\", \"language\": \"bash\"}}, {\"id\": \"86f22a01-2976-4613-86d4-529abd3c4efc\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7pbsp\\\">Save the file.</p>\"}, {\"id\": \"157340aa-91bf-471a-9246-7237a1745310\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"beq5o\\\">These values will be picked up when the webapp is first run and also when activating a virtual environment.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 15,
  "fields": {
    "body": "[{\"id\": \"11053e75-4651-4514-a3aa-1eb2400051ea\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"tkk0f\\\">On the Web tab set the following.</p><ul><li data-block-key=\\\"3lvtn\\\">Code &gt; Source code:<br/>mine is <i>/var/www/sites/nickmoreton.co.uk</i></li><li data-block-key=\\\"2ncsc\\\">Virtualenv path:<br/>mine is <i>/home/account-name-here/.virtualenvs/nickmoreton.co.uk_venv</i></li><li data-block-key=\\\"9jf8n\\\">Static files:<br/>url: <i>/static/</i> directory: <i>/var/www/sites/nickmoreton.co.uk/static<br/></i>url: <i>/media/</i> directory: <i>/var/www/sites/nickmoreton.co.uk/media</i></li></ul>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 16,
  "fields": {
    "body": "[{\"id\": \"16d14f70-772f-4eef-805d-43410c06abd6\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"w8kbr\\\">On your local machine, open webapp/settings/base.py and add/update the following:</p>\"}, {\"id\": \"020453ba-844c-44e5-b9f5-c6cc8521ba26\", \"type\": \"code\", \"value\": {\"code\": \"### existing code\\r\\nenv_vars = os.environ.copy()\\r\\n### end existing code\\r\\n\\r\\n### add this code block\\r\\nif \\\"DJANGO_SECRET_KEY\\\" in env_vars:\\r\\n    SECRET_KEY = env_vars[\\\"DJANGO_SECRET_KEY\\\"]\\r\\n\\r\\nif \\\"DJANGO_ALLOWED_HOSTS\\\" in env_vars:\\r\\n    ALLOWED_HOSTS = env_vars[\\\"DJANGO_ALLOWED_HOSTS\\\"].split(\\\",\\\")\\r\\n    \\r\\n### Find WAGTAIL_SITE_NAME = \\\"webapp\\\" and change is to...\\r\\nWAGTAIL_SITE_NAME = env_vars[\\\"WAGTAIL_SITE_NAME\\\"] if \\\"WAGTAIL_SITE_NAME\\\" in env_vars else \\\"\\\"\\r\\n\\r\\n### WAGTAILADMIN_BASE_URL = \\\"http://example.com\\\" and change it to ...\\r\\nWAGTAILADMIN_BASE_URL = env_vars[\\\"BASE_URL\\\"] if \\\"BASE_URL\\\" in env_vars else \\\"\\\"\", \"language\": \"python\"}}, {\"id\": \"3ef6a607-a8d8-487f-9e95-ad883bcef57d\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"thlh\\\">Open your local .env.example file and add these new environment variables, also make sure they are available in the .env file</p>\"}, {\"id\": \"b806738f-26f8-4fd9-b0cc-60acf26df002\", \"type\": \"code\", \"value\": {\"code\": \"WAGTAIL_SITE_NAME=site-name\\r\\nBASE_URL=http://localhost:8000\\r\\nDJANGO_SECRET_KEY=not-so-secret_key\\r\\nDJANGO_ALLOWED_HOSTS=localhost\", \"language\": \"bash\"}}, {\"id\": \"19b17b33-b89c-4205-87d4-05c774dfc3f6\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"q8plg\\\">In local development they will be picked up by Pipenv and passed to the webapp when it&#x27;s run.</p><p data-block-key=\\\"29ab5\\\">Try out the webapp locally to make sure all is working OK. Most of these settings will be overridden in dev.py when using runserver so probably won&#x27;t make any difference.</p><p data-block-key=\\\"249tt\\\">In production, on a live site they will be loaded from that environment.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 17,
  "fields": {
    "body": "[{\"id\": \"109d88f9-3861-4d16-a7f7-8d304204eca5\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"0kcgu\\\">Earlier I created a post-receive hook: <i>~/bare-repos/nickmoreton.co.uk.git/hooks/post-receive</i> open the file and add the following extra steps.</p>\"}, {\"id\": \"f19efff2-7d52-4696-aa92-6faabb78721b\", \"type\": \"code\", \"value\": {\"code\": \"Replace:\\r\\n# there will be more content added here later ... with the following, make adjustments for your own paths file names:\\r\\n\\r\\n# switch to site directory\\r\\ncd /var/www/sites/nickmoreton.co.uk\\r\\nsource /usr/local/bin/virtualenvwrapper.sh\\r\\n# and activate the virtual environment\\r\\nworkon nickmoreton.co.uk_venv\\r\\n\\r\\n# install/update requirements\\r\\necho \\\"INSTALL REQUIREMENTS\\\"\\r\\npip install -r requirements.txt\\r\\n\\r\\n# run migrations\\r\\necho \\\"RUN MIGRATIONS\\\"\\r\\npython manage.py migrate --no-input\\r\\n\\r\\n# add/update static files\\r\\necho \\\"COLLECT STATIC FILES\\\"\\r\\npython manage.py collectstatic --no-input\\r\\n\\r\\n# reload the web app by touching the wsgi file\\r\\necho \\\"RELOAD THE WEB APP\\\"\\r\\ntouch /var/www/www_nickmoreton_co_uk_wsgi.py\", \"language\": \"bash\"}}, {\"id\": \"84a7d750-6075-4deb-929e-85978530c94a\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"020zy\\\">These steps will install any new/updated requirements and run the necessary Django commands.</p><p data-block-key=\\\"580ea\\\">The last command touch will restart the webapp so that any changes are loaded.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 18,
  "fields": {
    "body": "[{\"id\": \"99da8fd4-f766-406e-b07f-b8fa20a8c714\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"2tk5g\\\">When a new webapp is created a WSGI file is automatically created with some example content. You can ignore and delete the content and add the following modified version of the example # +++++++++++ DJANGO +++++++++++ section.</p>\"}, {\"id\": \"440cc565-6276-4589-ae78-b98a35e80c72\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"q1wsl\\\">Update the paths and file names as appropriate for your own site.</p>\"}, {\"id\": \"984a7e21-e20e-4a22-98c4-76be6e364e37\", \"type\": \"code\", \"value\": {\"code\": \"import os\\r\\nimport sys\\r\\nfrom dotenv import load_dotenv # this was installed via requirements.txt\\r\\n\\r\\n# use your own site path\\r\\npath = '/var/www/sites/nickmoreton.co.uk'\\r\\nif path not in sys.path:\\r\\n    sys.path.append(path)\\r\\n\\r\\n# use your own path for the env settings\\r\\nenv_folder = os.path.expanduser('~/.env-settings/nickmoreton.co.uk')\\r\\nload_dotenv(os.path.join(env_folder, '.env'))\\r\\n\\r\\n# assumes your webapp is called webapp, substitute as appropriate\\r\\nos.environ['DJANGO_SETTINGS_MODULE'] = 'webapp.settings.production'\\r\\n\\r\\nfrom django.core.wsgi import get_wsgi_application\\r\\napplication = get_wsgi_application()\", \"language\": \"python\"}}, {\"id\": \"7a2f01db-7790-4d2e-8aac-ad293a867a13\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6idot\\\">Save the file.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 19,
  "fields": {
    "body": "[{\"id\": \"ee76c81a-1a39-4508-a687-4d9a5c9a1e40\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bmjc1\\\">First <i>git add</i> the file changes made so far and git commit them.</p>\"}, {\"id\": \"464947eb-cefa-4db7-a12f-dea377c45e48\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"506s3\\\">For the moment I&#x27;m working directly on my main branch. In the future I&#x27;ll be working on other branches and merging them to main for a deployment.</p>\"}, {\"id\": \"65fb884c-87ec-40c1-8d94-54f13934e056\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"35nep\\\">You should push to the origin repo first e.g.</p>\"}, {\"id\": \"23a6a400-7bb2-4c87-9133-0dd2c6378101\", \"type\": \"code\", \"value\": {\"code\": \"git push origin main\", \"language\": \"bash\"}}, {\"id\": \"dd859209-04c2-47df-9565-342828a2f272\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"djcde\\\">and then push to the production bare-repo to start the deployemnt.</p>\"}, {\"id\": \"b38b1bef-c8d5-4ff4-8156-466efd9703d4\", \"type\": \"code\", \"value\": {\"code\": \"git push production main\", \"language\": \"bash\"}}, {\"id\": \"779fbcd0-6969-4439-a2ee-3f35fb4a3b04\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"506s3\\\">If all is well you should see the deployment steps displayed in your console. On the first deployemnt is can take a few minutes to complete. Subsequent deployments may take less time.</p><p data-block-key=\\\"6r04n\\\">Although we use the touch command on the WSGI file to reload the webapp it can take a minute or so to actually run on PythonAnywhere.</p>\"}, {\"id\": \"013ff546-1a34-45b8-8085-945858c1547e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"4rats\\\">If you now visit your webapp url it should be live.</p><h2 data-block-key=\\\"e12lb\\\">Create a superuser on PythonAnywhere</h2><p data-block-key=\\\"bnock\\\">Open the Web tabs on PythonAnywhere.</p><p data-block-key=\\\"c2qg7\\\">Under the Virtualenv section click Start a console in this virtualenv to open a new console in the sites virtual env. (Your environment variables are loaded automatically for you because the virtual env will be activated)</p><p data-block-key=\\\"33ajp\\\">And run:</p>\"}, {\"id\": \"1e8b993e-db69-40d9-8992-d6fba71e8aea\", \"type\": \"code\", \"value\": {\"code\": \"./manage.py createsuperuser\", \"language\": \"bash\"}}, {\"id\": \"ca84ccfd-63ae-4d43-9740-fda54c56a1d8\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"d7m0j\\\">If you now visit webapp and login at /admin you should be able to test out the default Wagtail CMS</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 21,
  "fields": {
    "body": "[{\"id\": \"a3d3f767-6c3f-47ae-aa47-f1e196d45d55\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"xz8um\\\">Create a new repo on your preferred provider. Github can add some files for you when starting a new project, I decided to add a README file and a gitignore file for Python.</p><p data-block-key=\\\"c7ibd\\\">Clone the newly created repo to your local development machine. It will have a remote called origin.</p>\"}, {\"id\": \"d3bafac7-3d27-4293-84f8-800dcde3ece7\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"cf5l9\\\">Later on I&#x27;ll create a remote called production which I&#x27;ll use to deploy the site to PythonAnywhere.</p>\"}, {\"id\": \"dabe2227-282f-4551-96d4-9799b9f73440\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"4t1it\\\">Python dependencies</h2><p data-block-key=\\\"f9vg9\\\">There are a few ways to manage python dependencies, I&#x27;m using <a href=\\\"https://pipenv.pypa.io/en/latest/\\\">Pipenv</a> but you can use your preferred method. The only caveat is that the production dependencies ideally need to be in a requirements.txt file when deploying to PythonAnywhere.</p><p data-block-key=\\\"eqmpg\\\">With <a href=\\\"https://pipenv.pypa.io/en/latest/\\\">Pipenv</a> installed run:</p>\"}, {\"id\": \"aaaaf3a3-fde2-4ed3-809f-02eb61989519\", \"type\": \"code\", \"value\": {\"code\": \"pipenv install \\\"wagtail>=5.1,<5.2\\\" \\\"mysqlclient>=2.2,<2.3\\\" \\\"python-dotenv>=1.0,<1.1\\\" \\\"django>=4.2,<5.0\\\"\", \"language\": \"bash\"}}, {\"id\": \"0b2ce765-ae0a-4dda-8921-fdb6219b45a2\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"68evn\\\">Then create an initial requirements file with:</p>\"}, {\"id\": \"ebebc2c6-44a9-4514-9e83-d43422879065\", \"type\": \"code\", \"value\": {\"code\": \"pipenv requirements > requirements.txt\", \"language\": \"bash\"}}, {\"id\": \"6e4a9814-54b3-4f2f-844a-1a386b64fc7b\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"cruch\\\">Start a Wagtail site</h2><p data-block-key=\\\"3p6cn\\\">If you don&#x27;t have one already, add a .gitignore file so we don&#x27;t commit anything we shouldn&#x27;t.</p><p data-block-key=\\\"8ggpc\\\">A good example of a python .gitignore file is <a href=\\\"https://github.com/github/gitignore/blob/main/Python.gitignore\\\">https://github.com/github/gitignore/blob/main/Python.gitignore</a></p><p data-block-key=\\\"2cafs\\\">The .gitignore file should also contain the following at this stage.</p><p data-block-key=\\\"f9pg4\\\">/media</p><p data-block-key=\\\"eimv5\\\">Now create the initial Wagtail site called webapp or use your preferred name.</p>\"}, {\"id\": \"bee4b813-919b-46ab-881b-9cfc8fbe8f09\", \"type\": \"code\", \"value\": {\"code\": \"pipenv run wagtail start webapp\", \"language\": \"bash\"}}, {\"id\": \"82d8c374-0f10-4465-aa89-25b799558f94\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"bbgsl\\\">Modify the file and folder layout a little</h2>\"}, {\"id\": \"a769e132-aedf-45f4-8134-383c654203db\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"dz51h\\\">I like to alter the layout of the files and folders a little to suit my preferences. It&#x27;s not necessary but I find it easier to work with. You can skip this step if you prefer but make sure you adjust any paths in the following steps.</p>\"}, {\"id\": \"446e29ec-2e34-4bde-a3c1-119b47a8cfe3\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6loua\\\">Inside the webapp directory you can delete the following files as they are not used on PythonAnywhere:</p><ul><li data-block-key=\\\"er7es\\\">.dockerignore</li><li data-block-key=\\\"4f9cn\\\">Dockefile</li><li data-block-key=\\\"59iul\\\">requirements.txt</li></ul>\"}, {\"id\": \"1e52eb8f-810e-4d59-9fcb-94178e201a9e\", \"type\": \"code\", \"value\": {\"code\": \"rm webapp/.dockerignore webapp/Dockerfile webapp/requirements.txt\", \"language\": \"bash\"}}, {\"id\": \"e8e66774-9343-4864-a8d5-5da96bbb5e72\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"aoqr7\\\">Move the manage.py file to the root of the project:</p>\"}, {\"id\": \"939fafb7-bb46-4171-9118-45109c42bd63\", \"type\": \"code\", \"value\": {\"code\": \"mv webapp/manage.py .\", \"language\": \"bash\"}}, {\"id\": \"83d06159-e072-443d-bc42-091f93051ece\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7mb3j\\\">Move the all the files and folders from the webapp/webapp directory up one level to the webapp directory:</p>\"}, {\"id\": \"7da877a9-8758-465f-992b-f5a3e4266181\", \"type\": \"code\", \"value\": {\"code\": \"mv webapp/webapp/* webapp\", \"language\": \"bash\"}}, {\"id\": \"55c1c87f-7ed2-4600-8082-ac0dd47d7f88\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"e3u3g\\\">Delete the empty webapp/webapp directory:</p>\"}, {\"id\": \"549d87c8-fe78-46ba-95fd-4026b91dc627\", \"type\": \"code\", \"value\": {\"code\": \"rm -rf webapp/webapp\", \"language\": \"bash\"}}, {\"id\": \"554f25d8-acce-4e09-8bc9-a702353d9a21\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"a1hca\\\">Alter import paths and settings</h2><p data-block-key=\\\"3t20p\\\">Open webapp/urls.py and change the import path for:</p>\"}, {\"id\": \"ff16aeb4-1d06-4520-80ce-02331b449285\", \"type\": \"code\", \"value\": {\"code\": \"from search import views as search_views\\r\\n# to\\r\\nfrom webapp.search import views as search_views\", \"language\": \"python\"}}, {\"id\": \"b0389d29-7509-42c1-8985-8a55477da00a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"ak7j1\\\">Open webapp/settings/base.py and change the app names for home and search in INSTALLED_APPS to:</p>\"}, {\"id\": \"a91cfbfb-5411-4356-bea2-2293c80ead1f\", \"type\": \"code\", \"value\": {\"code\": \"INSTALLED_APPS = [\\r\\n \\\"webapp.home\\\",\\r\\n \\\"webapp.search\\\",\\r\\n ...\\r\\n]\", \"language\": \"python\"}}, {\"id\": \"02954837-c7c6-40d1-aa3c-f4188ffc24b2\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"e1vsi\\\">The project file structure should look like this:</p><p data-block-key=\\\"aptt2\\\">.<br/>\\u251c\\u2500\\u2500 venv<br/>\\u251c\\u2500\\u2500 webapp<br/>\\u2502 \\u251c\\u2500\\u2500 home<br/>\\u2502 \\u251c\\u2500\\u2500 search<br/>\\u2502 \\u251c\\u2500\\u2500 settings<br/>\\u2502 \\u251c\\u2500\\u2500 static<br/>\\u2502 \\u251c\\u2500\\u2500 templates<br/>\\u2502 \\u251c\\u2500\\u2500 __init__.py<br/>\\u2502 \\u251c\\u2500\\u2500 urls.py<br/>\\u2502 \\u2514\\u2500\\u2500 wsgi.py<br/>\\u251c\\u2500\\u2500 .gitignore<br/>\\u251c\\u2500\\u2500 manage.py<br/>\\u251c\\u2500\\u2500 Pipfile<br/>\\u251c\\u2500\\u2500 Pipfile.lock<br/>\\u251c\\u2500\\u2500 README.md<br/>\\u251c\\u2500\\u2500 requirements.txt<br/></p>\"}, {\"id\": \"41087582-e4d4-4488-85e2-ab3a7abc90ed\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"54iip\\\">Run the Wagtail project locally</h2><p data-block-key=\\\"76o2f\\\">Run the Wagtail project locally to check that everything is working as expected, activate the virtual environment e.g. pipenv shell and run the following commands:</p>\"}, {\"id\": \"f0b39fd3-9433-4c4d-bc3e-324048c329ba\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py migrate\\r\\npython manage.py createsuperuser\", \"language\": \"bash\"}}, {\"id\": \"c5dd5815-4a17-45ce-a7ee-1174d505ac4e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"2ddes\\\">Then run the local development server:</p>\"}, {\"id\": \"916254e0-c8e1-4b63-97d1-d87c0aa1334d\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py runserver\", \"language\": \"bash\"}}, {\"id\": \"3958791c-b6c4-419c-b511-ee64129c05f3\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"al79g\\\">Open a browser and go to <a href=\\\"http://localhost:8000/\\\">http://localhost:8000</a> and you should see the default Wagtail home page.</p><p data-block-key=\\\"ajs9p\\\">Open a browser and go to <a href=\\\"http://localhost:8000/admin/\\\">http://localhost:8000/admin/</a> and login with the superuser credentials you just created.</p>\"}, {\"id\": \"694b227d-a9d5-4f16-aac1-388b990a1513\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"dz51h\\\">The site is currently using sqlite3 database but later on it will be swapped out for a Mysql database.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 22,
  "fields": {
    "body": "[{\"id\": \"52b20549-481d-43f8-870e-74d1e2cd68ad\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"hmtol\\\">Setup environment variables</h3><p data-block-key=\\\"8og6\\\">To handle the configuration of the Wagtail app to use mysql and later other settings I&#x27;ll set up some environment variables.</p><h3 data-block-key=\\\"nve9\\\">Add a file to store the environment variables</h3>\"}, {\"id\": \"10ddfdd8-5a73-4198-9993-18e0db7f3046\", \"type\": \"code\", \"value\": {\"code\": \"touch .env\", \"language\": \"bash\"}}, {\"id\": \"e7429ee7-29c3-4150-9b1f-c4ce5cd15f3c\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"2e27i\\\">and add the following content</p>\"}, {\"id\": \"9a17ef1e-cd46-4387-9847-522c48c20ed6\", \"type\": \"code\", \"value\": {\"code\": \"MYSQL_ROOT_PASSWORD=webapp\\r\\nMYSQL_DATABASE=webapp\\r\\nMYSQL_USER=webapp\\r\\nMYSQL_PASSWORD=webapp\\r\\nMYSQL_ROOT_HOST='%'\\r\\nMYSQL_HOST=127.0.0.1\\r\\nMYSQL_PORT=3306\", \"language\": \"bash\"}}, {\"id\": \"667a6590-07d3-47f8-933d-3d3e2c714bba\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"28u1u\\\">Although these variables aren&#x27;t secret, later on we may add some that are and use it a template to create a .env file next.</p><p data-block-key=\\\"ansh7\\\">To make sure the .env file doesn&#x27;t get committed add the .env file to the .gitignore file:</p>\"}, {\"id\": \"39c53f44-4cb6-4cbf-a35a-3e071c69a316\", \"type\": \"code\", \"value\": {\"code\": \"echo \\\".env\\\" >> .gitignore\", \"language\": \"bash\"}}, {\"id\": \"cc33a2ae-ad8f-463a-aaf7-7aaeff55cd46\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"adq13\\\">These are development variables and to save having to set them every time I create a .env.example file to use as a template which can be committed to git (make sure there are no real secrets in this file). Then next time I need to set up for development I can just copy the .env.example file to .env and edit the values there.</p>\"}, {\"id\": \"35953bb9-5ef4-46cd-885e-95bbd5964074\", \"type\": \"code\", \"value\": {\"code\": \"cp .env .env.example\", \"language\": \"bash\"}}, {\"id\": \"1fee3dcb-7a5b-4fb1-8478-229244b82cb9\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"78ku\\\">Add a mysql docker container for development</h2><p data-block-key=\\\"3l274\\\">You will need docker installed to run the compose file: try <a href=\\\"https://orbstack.dev/\\\">Orbstack</a></p><p data-block-key=\\\"1uluh\\\">This is a docker-compose setup that can be used to run up the Mysql database locally for development. If you already have Mysql running locally you can probably skip this step and use that instead.</p><p data-block-key=\\\"8d4vj\\\">Create a docker-compose.yml file in the root of the project and add the following content:</p>\"}, {\"id\": \"6ed2e237-bc63-463c-97cc-bd1df83bcd98\", \"type\": \"code\", \"value\": {\"code\": \"services:\\r\\n  db:\\r\\n    image: mysql:8.0.29 # version in use on pythonanywhere\\r\\n    command: --default-authentication-plugin=mysql_native_password\\r\\n    env_file:\\r\\n      - .env\\r\\n    ports:\\r\\n      - \\\"3306:3306\\\"\\r\\n    volumes:\\r\\n      - dbdata:/var/lib/mysql\\r\\n    container_name: mysql\\r\\n    healthcheck:\\r\\n      test: [ \\\"CMD\\\", \\\"mysqladmin\\\", \\\"ping\\\", \\\"-h\\\", \\\"localhost\\\" ]\\r\\n      interval: 10s\\r\\n      timeout: 20s\\r\\n      retries: 5\\r\\n\\r\\n  adminer:\\r\\n    image: adminer\\r\\n    ports:\\r\\n      - 8080:8080\\r\\n    depends_on:\\r\\n      db:\\r\\n        condition: service_healthy\\r\\n\\r\\nvolumes:\\r\\n  dbdata:\", \"language\": \"yaml\"}}, {\"id\": \"bc27bea0-b544-43c3-80eb-1f9d6c00d720\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"eeclo\\\">Then from the root of your project run:</p>\"}, {\"id\": \"b9b4f7c1-4d7e-4813-a990-40069e73ee94\", \"type\": \"code\", \"value\": {\"code\": \"docker-compose up -d\", \"language\": \"bash\"}}, {\"id\": \"81cd005c-33cf-4e41-a52f-6a8b48a22d4a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"4r1nn\\\">Because the .env file is available the running db container will use the MYSQL_... env vars. Therefore the username, password and database name are initialized to webapp</p><p data-block-key=\\\"c9m87\\\">The adminer service is a web interface to the database.</p><p data-block-key=\\\"erpi9\\\">To check the database is running, open a web browser and go to <a href=\\\"http://localhost:8080/\\\">http://localhost:8080</a> and login with webapp as the username and password. You should see the database named webapp has been created.</p><h2 data-block-key=\\\"6l2i7\\\">Configure Wagtail to use the Mysql database</h2><p data-block-key=\\\"706hu\\\">Open webapp/settings/base.py and find:</p>\"}, {\"id\": \"513c091e-94b2-4562-aa70-d75078e30a57\", \"type\": \"code\", \"value\": {\"code\": \"DATABASES = {\\r\\n    \\\"default\\\": {\\r\\n        \\\"ENGINE\\\": \\\"django.db.backends.sqlite3\\\",\\r\\n        \\\"NAME\\\": os.path.join(BASE_DIR, \\\"db.sqlite3\\\"),\\r\\n    }\\r\\n}\", \"language\": \"python\"}}, {\"id\": \"36eea068-6b4f-47be-80fd-0cef073fcdd4\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"cqh80\\\">and replace it with:</p>\"}, {\"id\": \"f865e427-7ed7-494b-8b23-b034fe62d631\", \"type\": \"code\", \"value\": {\"code\": \"DATABASES = {\\r\\n    \\\"default\\\": {\\r\\n        \\\"ENGINE\\\": \\\"django.db.backends.mysql\\\",\\r\\n        \\\"NAME\\\": env_vars[\\\"MYSQL_DATABASE\\\"] if \\\"MYSQL_DATABASE\\\" in env_vars else \\\"\\\",\\r\\n        \\\"USER\\\": env_vars[\\\"MYSQL_USER\\\"] if \\\"MYSQL_USER\\\" in env_vars else \\\"\\\",\\r\\n        \\\"PASSWORD\\\": env_vars[\\\"MYSQL_PASSWORD\\\"] if \\\"MYSQL_PASSWORD\\\" in env_vars else \\\"\\\",\\r\\n        \\\"HOST\\\": env_vars[\\\"MYSQL_HOST\\\"] if \\\"MYSQL_HOST\\\" in env_vars else \\\"\\\",\\r\\n        \\\"PORT\\\": env_vars[\\\"MYSQL_PORT\\\"] if \\\"MYSQL_PORT\\\" in env_vars else \\\"\\\",\\r\\n    }\\r\\n}\", \"language\": \"python\"}}, {\"id\": \"ec4a144f-c34b-434c-9ea3-506d3c0da578\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6g7uo\\\">Somewhere near the top of base.py add the following:</p>\"}, {\"id\": \"5564d4e1-5a13-4b5d-9809-778a3faa8136\", \"type\": \"code\", \"value\": {\"code\": \"### existing code\\r\\nimport os\\r\\n\\r\\nPROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\\r\\nBASE_DIR = os.path.dirname(PROJECT_DIR)\\r\\n### end existing code\\r\\n\\r\\nenv_vars = os.environ.copy() ### add this line\", \"language\": \"python\"}}, {\"id\": \"8d1b3b99-090d-4642-8cd9-35f56a0dc151\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"meu37\\\">env_vars will hold all the environment variables and we can use them to connect to the local mysql database. In PythonAnywhere those environment variables will be available but that still needs to be setup.</p>\"}, {\"id\": \"9e5c054e-93ec-4899-abda-afa4b0c65ff5\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"78bcg\\\">Other Wagtail settings from environment variables</h2><p data-block-key=\\\"fe4ol\\\">Still in base.py find and update the following lines:</p>\"}, {\"id\": \"867664b2-80bf-46e3-a8e2-23c24be34e80\", \"type\": \"code\", \"value\": {\"code\": \"### existing code\\r\\nenv_vars = os.environ.copy()\\r\\n### end existing code\\r\\n\\r\\n### add this code block\\r\\nif \\\"DJANGO_SECRET_KEY\\\" in env_vars:\\r\\n    SECRET_KEY = env_vars[\\\"DJANGO_SECRET_KEY\\\"]\\r\\n\\r\\nif \\\"DJANGO_ALLOWED_HOSTS\\\" in env_vars:\\r\\n    ALLOWED_HOSTS = env_vars[\\\"DJANGO_ALLOWED_HOSTS\\\"].split(\\\",\\\")\\r\\n    \\r\\n### Find WAGTAIL_SITE_NAME = \\\"webapp\\\" and change it to...\\r\\nWAGTAIL_SITE_NAME = env_vars[\\\"WAGTAIL_SITE_NAME\\\"] if \\\"WAGTAIL_SITE_NAME\\\" in env_vars else \\\"\\\"\\r\\n\\r\\n### WAGTAILADMIN_BASE_URL = \\\"http://example.com\\\" and change it to ...\\r\\nWAGTAILADMIN_BASE_URL = env_vars[\\\"BASE_URL\\\"] if \\\"BASE_URL\\\" in env_vars else \\\"\\\"\", \"language\": \"python\"}}, {\"id\": \"3ddb5cfb-f8ff-40b9-b668-2010d7a0e61f\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"meu37\\\">When running in production, the environments variables will be loaded from that environment.</p>\"}, {\"id\": \"bda219eb-e65f-471e-ab01-1394148cb33b\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"f0344\\\">Open your local .env file and add these new environment variables and alter the values, also make sure they are available in the .env.example file</p>\"}, {\"id\": \"e3c9e210-6534-4972-a41f-c297fd1006b8\", \"type\": \"code\", \"value\": {\"code\": \"WAGTAIL_SITE_NAME=site-name\\r\\nBASE_URL=http://localhost:8000\\r\\nDJANGO_SECRET_KEY=not-so-secret_key\\r\\nDJANGO_ALLOWED_HOSTS=localhost\", \"language\": \"bash\"}}, {\"id\": \"3c64dfa0-6c52-4b60-aa41-11b59c5e21d7\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"meu37\\\">In local development they will be picked up by Pipenv and passed to the webapp when it&#x27;s run.</p><p data-block-key=\\\"dtr9s\\\">Try out the webapp locally to make sure all is working OK.</p><p data-block-key=\\\"40ccf\\\">Most of these settings will be overridden in dev.py when using runserver so probably won&#x27;t make any difference.</p>\"}, {\"id\": \"b9eb0fef-bf4a-40b7-8d73-722e26330467\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"11d4b\\\">Run the Wagtail project locally</h2><p data-block-key=\\\"dchje\\\">Run the Wagtail project locally to check that everything is working as expected. <b>With the virtual environment re-activated</b> to load the environment variables e.g. `pipenv shell` and run the following commands:</p>\"}, {\"id\": \"92fbf620-c838-470a-820c-041533668b78\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py migrate\\r\\npython manage.py createsuperuser\", \"language\": \"bash\"}}, {\"id\": \"31c777c9-07ad-451e-82cf-c07798eff738\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"8in2p\\\">and</p>\"}, {\"id\": \"71c3e095-5ca0-4ef5-be78-518712380c3a\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py runserver\", \"language\": \"bash\"}}, {\"id\": \"5639f392-7837-4a88-b6ea-8e5498253b3d\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"cfr1\\\">Open a browser and go to <a href=\\\"http://localhost:8000/\\\">http://localhost:8000</a> and you should see the default Wagtail home page.</p><p data-block-key=\\\"cuttc\\\">Open a browser and go to <a href=\\\"http://localhost:8000/admin/\\\">http://localhost:8000/admin/</a> and login with the superuser credentials you just created.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 23,
  "fields": {
    "body": "[{\"id\": \"e953c3c7-e53c-4555-a053-e2a7ec28af85\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"md6qj\\\">Once you have created your PythonAnywhere account, log into it.</p><p data-block-key=\\\"cbnqq\\\">Open the <b>Web</b> tab and click the <b>Add a new web app button</b>.</p><ol><li data-block-key=\\\"d44br\\\"><b>Choose:</b> <i>Own domain</i> (or use the default given by PA) I used my own domain name here, I suggest you also specify www in the name or the subdomain you are using.</li><li data-block-key=\\\"8u89j\\\"><b>Choose:</b> <i>Manual setup</i></li><li data-block-key=\\\"8aqoh\\\"><b>Choose:</b> <i>Python</i> (latest you can choose)</li></ol><p data-block-key=\\\"cu767\\\">This will create the webapp and take you to the settings page for the webapp.</p>\"}, {\"id\": \"d60a4eb1-7973-4f2e-803f-3da9bde74a03\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"ebq4x\\\">I find it best to use the full domain, including www for the webapp name. Later on at my domain provider I set up web-forwarding from domain.com to www.domain.com It can take a while for DNS changes to be updated for the webapp so you could come back later and complete some of the following steps.</p>\"}, {\"id\": \"5e38f96d-2a52-48c8-93fb-335483612c86\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"112ut\\\">Configure your domain name</h2><p data-block-key=\\\"8e4jf\\\">Copy the CNAME details and add them to your domain at your providers control panel. <a href=\\\"https://help.pythonanywhere.com/pages/CustomDomains\\\">PA Help</a></p><p data-block-key=\\\"er86l\\\">When the DNS changes have propagated you should add an HTTPS certificate and make it the default Force HTTPS enabled.</p><h2 data-block-key=\\\"fqrgr\\\">Setup directories</h2>\"}, {\"id\": \"0583b337-091b-4fc1-8b19-c077b9702a30\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"3zzjy\\\">As it&#x27;s possible to host multiple web apps in your PA account, think about naming when choosing your directory/file names</p>\"}, {\"id\": \"bdf2bddd-24dc-4579-9c72-5b31dd223132\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"a5obg\\\">Open the Files tab...</h3><p data-block-key=\\\"arkrv\\\"><b><i>Source code directory</i></b></p><p data-block-key=\\\"1km2n\\\">Navigate to <b>/var/www/sites</b> which should already exist.</p><p data-block-key=\\\"efbb0\\\">Create a directory to hold your source code. Something like <b>www.domain.com</b>, this is going to be my live/production website.</p><p data-block-key=\\\"7gbn\\\"><b><i>Bare repos directory</i></b></p><p data-block-key=\\\"4f6e6\\\">Set up a directory structure to hold your bare repos.</p><p data-block-key=\\\"788ae\\\">Navigate to your home folder e.g. <b>/home/account-name</b></p><p data-block-key=\\\"62hvo\\\">Create a directory inside to hold your bare-repos. I named mine <i>bare-repos</i> Then I add another directory inside bare-repos something like <b>www.domain.com.git</b></p><p data-block-key=\\\"39b0s\\\">So the path to the bare repo directory is:</p>\"}, {\"id\": \"9a89c632-62c3-4eba-b7db-48c1d1ef5fb9\", \"type\": \"code\", \"value\": {\"code\": \"/home/account-name/bare-repos/www.domain.com.git\", \"language\": \"bash\"}}, {\"id\": \"29646b8f-e751-4860-ba6d-625d12621d0e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"egije\\\"><b><i>Environment variables storage</i></b></p><p data-block-key=\\\"5tq2r\\\">Navigate to your home folder e.g. <b>/home/account-name</b></p><p data-block-key=\\\"9t1dk\\\">Create a directory to hold your environment variables. I called mine <b>.env-settings</b> then I added another directory inside it called <b>www.domain.com</b></p><p data-block-key=\\\"7f6j1\\\">So the path to the environment variables directory is:</p>\"}, {\"id\": \"8f2c63d4-aa64-4e0c-b27e-6ae575bb5878\", \"type\": \"code\", \"value\": {\"code\": \"/home/account-name/.env-settings/www.domain.com\", \"language\": \"bash\"}}, {\"id\": \"07a73cc1-3807-4c21-8b23-567ca013bcd1\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"dsfgf\\\">Create a virtual environment</h2><p data-block-key=\\\"8eive\\\">Open the Consoles tab and open a new bash console.</p><p data-block-key=\\\"8l0p\\\">You should create a virtual environment for each webapp. PA makes this straight forward. <a href=\\\"https://help.pythonanywhere.com/pages/Virtualenvs/\\\">PA Help</a></p><p data-block-key=\\\"a9p8d\\\">Use mkvirtualenv to create a new virtual environment for this site. I named mine <b>www.domain.com.venv</b> and I&#x27;m using Python 3.10</p>\"}, {\"id\": \"01b718f0-cc8e-4e1f-a66a-8276f8c4c4c1\", \"type\": \"code\", \"value\": {\"code\": \"mkvirtualenv www.domain.com.venv --python=/usr/bin/python3.10\\r\\n\\r\\n# to confirm the virtual environment has been created run:\\r\\nls ~/.virtualenvs/www.domain.com.venv/\\r\\n> bin lib pyvenv.cfg\", \"language\": \"bash\"}}, {\"id\": \"6aa0ac4c-540f-429b-a328-1c7d1ab4f407\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"23idg\\\">Load environment variables when activating the virtual env</h3><p data-block-key=\\\"c5u9v\\\">You can manually activate the virtual environment by running:</p>\"}, {\"id\": \"514f7b25-b591-4727-a5f5-c7dcfa747b67\", \"type\": \"code\", \"value\": {\"code\": \"workon www.domain.com.venv\", \"language\": \"bash\"}}, {\"id\": \"f5f7099d-9d03-4109-898d-0d4bab083a20\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"8lu5\\\">Create a .env file in the environment variables directory created earlier:</p>\"}, {\"id\": \"83faf76c-c28b-4a08-8fa6-b74bb5f7793a\", \"type\": \"code\", \"value\": {\"code\": \"touch ~/.env-settings/www.domain.com/.env\", \"language\": \"bash\"}}, {\"id\": \"2baf760e-2e53-4623-9f6c-a29e030179e1\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"aap4r\\\">Later we&#x27;ll add some env vars to this file...</p><p data-block-key=\\\"1jkt7\\\">When you activate the virtual environment, environment variables can be loaded for you. You can set this up by running:</p>\"}, {\"id\": \"bc316137-fca3-44b3-94f3-dd00fd48081d\", \"type\": \"code\", \"value\": {\"code\": \"echo \\\"set -a; source ~/.env-settings/www.domain.com/.env; set +a\\\" >> ~/.virtualenvs/www.domain.com.venv/bin/postactivate\", \"language\": \"bash\"}}, {\"id\": \"f5fcb4e0-bba3-4b64-b3be-0cffcf04758e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"9jqt4\\\"><a href=\\\"https://help.pythonanywhere.com/pages/environment-variables-for-web-apps/#for-bash-consoles-load-your-env-file-in-your-virtualenv-postactivate-script\\\">PA help</a> about environment variables</p><h2 data-block-key=\\\"4sfek\\\">Set up a git bare repo</h2><p data-block-key=\\\"4vcak\\\">A bare repo is the remote I&#x27;ll push my main branch to to start a deployment. <a href=\\\"https://blog.pythonanywhere.com/87/\\\">A PA Blog Post</a> about bare repos.</p><p data-block-key=\\\"5otnh\\\">Open the Consoles tab open a new console or use the console from the previous step.</p><p data-block-key=\\\"7ueo6\\\">To initialize the bare repo for a webapp switch to the bare-repos directory:</p>\"}, {\"id\": \"54c1c0cc-ef69-431b-a447-18b2f612b360\", \"type\": \"code\", \"value\": {\"code\": \"cd ~/bare-repos/www.domain.com.git/\", \"language\": \"bash\"}}, {\"id\": \"bd885f3b-a68c-4f16-b2ae-51479f22cc66\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"5vnkt\\\">and run:</p>\"}, {\"id\": \"c8c309f1-b52d-492f-9b7b-6a708b3fa789\", \"type\": \"code\", \"value\": {\"code\": \"git init --bare\", \"language\": \"bash\"}}, {\"id\": \"992826e1-f0fb-421f-8efa-133852fa5b23\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7192o\\\"><a href=\\\"https://stackoverflow.com/questions/7632454/how-do-you-use-git-bare-init-repository\\\">Stack Overflow</a> How do you use &quot;git --bare init&quot; repository?</p><h3 data-block-key=\\\"3lros\\\">Create a post-receive hook</h3><p data-block-key=\\\"8v5ek\\\">While still in the bare-repos directory for your site:</p><p data-block-key=\\\"49qve\\\">Create a post-receive hook file:</p>\"}, {\"id\": \"4f7a9d81-395f-4ac7-b68d-5bc364a984ab\", \"type\": \"code\", \"value\": {\"code\": \"touch hooks/post-receive\", \"language\": \"bash\"}}, {\"id\": \"71fd5532-5808-4f0d-853b-9e1d938e1950\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"j1v3\\\">then I opened the file in nano (you could open if from the Files tab):</p>\"}, {\"id\": \"7ea127a8-7fa6-476e-8008-b81b0f6ea64c\", \"type\": \"code\", \"value\": {\"code\": \"nano hooks/post-receive\", \"language\": \"bash\"}}, {\"id\": \"c906fe46-606e-4e8b-b924-e0e10fd9d61e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7ij46\\\">and added the following content (substitute account-name with your own account name and www.domain.com with your own domain name):</p>\"}, {\"id\": \"aba4c099-1c51-44bb-8456-f773f9347910\", \"type\": \"code\", \"value\": {\"code\": \"#!/bin/bash\\r\\n\\r\\nwhile read oldrev newrev ref\\r\\ndo\\r\\nif [[ $ref =~ .*/main ]];\\r\\nthen\\r\\n # only the main branch can be deployed\\r\\n\\r\\n # ensure the site directory exists\\r\\n mkdir -p /var/www/sites/www.domain.com\\r\\n\\r\\n # checkout the latest version of the site\\r\\n git --work-tree=/var/www/sites/www.domain.com --git-dir=/home/account-name/bare-repos/www.domain.com.git checkout -f main\\r\\n\\r\\n # there will be more content added here later ...\\r\\n else\\r\\n echo \\\"Ref $ref successfully received. Doing nothing: only the main branch may be deployed on this server.\\\"\\r\\nfi\\r\\ndone\", \"language\": \"bash\"}}, {\"id\": \"2aa089b4-8dd5-46a1-9d1f-fb0d511e901a\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"45mjf\\\">Make the post-receive hook executable</h3><p data-block-key=\\\"e5j24\\\">In the console run:</p>\"}, {\"id\": \"8d9dd147-7c55-495d-bac9-88b5162be26b\", \"type\": \"code\", \"value\": {\"code\": \"chmod +x ~/bare-repos/www.domain.com.git/hooks/post-receive\", \"language\": \"bash\"}}, {\"id\": \"f8002a64-720e-4301-a5cc-1d40606aac10\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"74hca\\\">Create a Mysql database on PythonAnywhere</h2><p data-block-key=\\\"ehvrd\\\">On the Databases tab create a new database. I called mine <b>www_domain_com_db</b>. PythonAnywhere prepends your account name to the database name followed by a $. So my database name is <i>account-name$www_domain_com_db</i></p><p data-block-key=\\\"1edii\\\">As suggested it&#x27;s best to add a new password for your database if you&#x27;ve not already done so.</p><h2 data-block-key=\\\"a2tju\\\">Add env vars on PythonAnywhere</h2><p data-block-key=\\\"mlkj\\\">Earlier on I created a .env file at <b>~/.env-settings/www.domain.com/.env</b></p><p data-block-key=\\\"ft2rs\\\">Open the file, you can do this from the Files tab and add the following content, substituting the values for your own:</p>\"}, {\"id\": \"aa714da2-c91b-4441-af99-7613ff75c649\", \"type\": \"code\", \"value\": {\"code\": \"MYSQL_DATABASE='account-name$www_domain_com_db'\\r\\nMYSQL_USER='account-name' # Username\\r\\nMYSQL_PASSWORD='the-password-just-created'\\r\\nMYSQL_HOST='get-this-from-the-databases-tab' # Database host address\\r\\nMYSQL_PORT='3306'\\r\\n\\r\\n# While I am editing this file, although not Database related the following can be added.\\r\\nWAGTAIL_SITE_NAME='add-your-sites-name'\\r\\nBASE_URL='http://www.domain.com'\\r\\nDJANGO_SECRET_KEY='add-a-good-secret-key'\\r\\nDJANGO_ALLOWED_HOSTS='www.domain.com'\", \"language\": \"bash\"}}, {\"id\": \"649b0309-d1e7-4054-95b2-8e663306d26f\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"11mfs\\\">Save the file.</p>\"}, {\"id\": \"f86810f0-31c9-4447-969e-c0a9eef0d007\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"7pxoc\\\">These values will be picked up when the webapp is first run and also when activating a virtual environment.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 24,
  "fields": {
    "body": "[{\"id\": \"e1793f67-bc91-486d-9b55-b21fb6beae8a\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"b94g3\\\">Deploy hooks (post-receive)</h2><p data-block-key=\\\"2pa8r\\\">Earlier I created a post-receive hook: <b>~/bare-repos/www.domain.com.git/hooks/post-receive</b> open the file (use the files tab to locate it and open it in the editor) and add the following extra steps.</p>\"}, {\"id\": \"a863ceb2-0bff-4b90-a62d-2d1865b14a54\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"83i16\\\">Replace: <i># there will be more content added here later ...</i> with the following, make adjustments for your own paths and/or file names:</p>\"}, {\"id\": \"c558a2ff-1479-4202-a0dc-6d43fec92a54\", \"type\": \"code\", \"value\": {\"code\": \"# there will be more content added here later ...\\r\\n\\r\\n# Replace the above with ...\\r\\n\\r\\n# switch to site directory\\r\\ncd /var/www/sites/www.domain.com\\r\\nsource /usr/local/bin/virtualenvwrapper.sh\\r\\n# and activate the virtual environment\\r\\nworkon www.domain.com.venv\\r\\n\\r\\n# install/update requirements\\r\\necho \\\"INSTALL REQUIREMENTS\\\"\\r\\npip install -r requirements.txt\\r\\n\\r\\n# run migrations\\r\\necho \\\"RUN MIGRATIONS\\\"\\r\\npython manage.py migrate --no-input\\r\\n\\r\\n# add/update static files\\r\\necho \\\"COLLECT STATIC FILES\\\"\\r\\npython manage.py collectstatic --no-input\\r\\n\\r\\n# reload the web app by touching the wsgi file\\r\\necho \\\"RELOAD THE WEB APP\\\"\\r\\ntouch /var/www/www_domain_com_wsgi.py\", \"language\": \"bash\"}}, {\"id\": \"6d199342-14dc-4e0d-b1c8-dab4587a17c3\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"504s\\\">These steps will install any new/updated requirements and run the necessary Django commands.</p><p data-block-key=\\\"b4kme\\\">The last command <i>touch</i> will restart the webapp so that any changes are loaded.</p><p data-block-key=\\\"dgabj\\\">Save the file.</p><h2 data-block-key=\\\"8lg96\\\">Update the WSG file on PythonAnywhere</h2><p data-block-key=\\\"4q0re\\\">From the Web tab open the WSGI configuration file for your site.</p><p data-block-key=\\\"oq55\\\"></p>\"}, {\"id\": \"e2737377-2c28-4827-a457-4e0f333aec8d\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"20fe7\\\">When a new webapp is created a WSGI file is automatically created with some example content. You can delete all the content and add the following modified version of the example</p><p data-block-key=\\\"114t2\\\"># +++++++++++ DJANGO +++++++++++  section.</p>\"}, {\"id\": \"884f3f4d-1d67-4a3d-bec1-2aeff050968d\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"1vai4\\\">Add this python code to your sites WSGI file, update the paths and file names as appropriate for your own site.</p>\"}, {\"id\": \"95ba0b0c-2d92-4707-987a-6a06b190a797\", \"type\": \"code\", \"value\": {\"code\": \"import os\\r\\nimport sys\\r\\nfrom dotenv import load_dotenv # this was installed via requirements.txt\\r\\n\\r\\n# use your own site path\\r\\npath = '/var/www/sites/www.domain.com'\\r\\nif path not in sys.path:\\r\\n    sys.path.append(path)\\r\\n\\r\\n# use your own path for the env settings\\r\\nenv_folder = os.path.expanduser('~/.env-settings/www.domain.com')\\r\\nload_dotenv(os.path.join(env_folder, '.env'))\\r\\n\\r\\n# assumes your webapp is called webapp, substitute as appropriate\\r\\nos.environ['DJANGO_SETTINGS_MODULE'] = 'webapp.settings.production'\\r\\n\\r\\nfrom django.core.wsgi import get_wsgi_application\\r\\napplication = get_wsgi_application()\", \"language\": \"python\"}}, {\"id\": \"ff527db4-6142-4e3a-bb18-3b93a376df6a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"32aqi\\\">Save the file.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 25,
  "fields": {
    "body": "[{\"id\": \"6553df6a-8a71-456f-9650-90f5deb7f52a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"96tav\\\">First <i>git add</i> the file changes made so far and <i>git commit</i> them.</p><p data-block-key=\\\"4ntv\\\">For the moment I&#x27;m working directly on my main branch. In the future I&#x27;ll be working on other branches and merging them to main for running a deployment.</p><p data-block-key=\\\"7s2cm\\\">You should push to the origin repo first e.g:</p>\"}, {\"id\": \"33190219-a03f-46af-accd-abb1f0a28a9e\", \"type\": \"code\", \"value\": {\"code\": \"git push origin main\", \"language\": \"bash\"}}, {\"id\": \"142bd43a-9c6b-4fa6-bff2-b826eae0b9fd\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"chm1a\\\">Add the new remote to your local repository</h2><p data-block-key=\\\"7d8p9\\\">Substitute account-name with your own account name. My account is in the EU so I need to use <b>ssh.eu.pythonanywhere.com</b></p><p data-block-key=\\\"cj2s5\\\">On your local machine in the root of the project run:</p>\"}, {\"id\": \"5c8ae378-7267-43a8-b478-72a869f0fa6c\", \"type\": \"code\", \"value\": {\"code\": \"git remote add production account-name@ssh.eu.pythonanywhere.com:/home/account-name/bare-repos/www.domain.com.git\", \"language\": \"bash\"}}, {\"id\": \"09b56c1d-1fba-4bb2-8a74-964f1edece1c\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"awoeg\\\">I&#x27;m using production as the name of the remote repo. You can use any name you like.</p>\"}, {\"id\": \"e3885879-2e85-40ff-9562-ebdcf5e6065a\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"cthel\\\">Pushing to the remote repo (will start a deployment)</h2><p data-block-key=\\\"aopj7\\\">I&#x27;m going to push my main branch to the remote repo.</p>\"}, {\"id\": \"dd480392-0fa7-4277-82c2-6ac2c3e72923\", \"type\": \"code\", \"value\": {\"code\": \"git push production main\", \"language\": \"bash\"}}, {\"id\": \"119f432b-c1c6-401a-9a89-adc704a3a604\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"5d2ng\\\">Earlier on, in the post-receive hook I added a check to ensure only the main branch can be deployed. If you are on another branch and accidentally try to push it to your production remote it will not complete and report the error.</p><ul><li data-block-key=\\\"26qlg\\\">I can see the push has worked because in <i>/var/www/sites/www.domain.com</i> I can see the new files.</li><li data-block-key=\\\"ap08c\\\">The post-receive hook will manage the creation of the webapp directory if it doesn&#x27;t exist and will copy across the current file changes to <i>/var/www/sites/wwww.domain.com</i></li><li data-block-key=\\\"4b2fq\\\">If all is well you should see the deployment steps displayed in your console.</li><li data-block-key=\\\"10d5i\\\">On the first deployment it can take a few minutes to complete. Subsequent deployments usually take less time.</li><li data-block-key=\\\"5ui39\\\">In the post-receive hook, the touch command on the WSGI file will reload the webapp, it can take a minute or so to actually run on PythonAnywhere.</li></ul><p data-block-key=\\\"7ve45\\\">If you now visit your webapp url it should be live.</p><h2 data-block-key=\\\"9g6qe\\\">Create a superuser on PythonAnywhere (optional and only required one time)</h2><p data-block-key=\\\"87laq\\\">Open the Web tab on PythonAnywhere.</p><p data-block-key=\\\"16tsi\\\">Under the Virtualenv section click Start a console in this virtualenv to open a new console in the sites virtual env. (Your environment variables are loaded automatically for you because the virtual env will be activated)</p><p data-block-key=\\\"67f9n\\\">And run:</p>\"}, {\"id\": \"b388a1b7-f8e0-40a2-bb80-fc30bbbd0288\", \"type\": \"code\", \"value\": {\"code\": \"./manage.py createsuperuser\", \"language\": \"bash\"}}, {\"id\": \"ffa9ea45-2909-4bff-9b76-0acde24a5775\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"1lfn3\\\">If you now visit webapp and login at /admin you should be able to test out the default Wagtail CMS</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 27,
  "fields": {
    "body": "[{\"id\": \"003de25f-c641-44b9-81a8-f80bcb809a81\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"t9ypn\\\">This is a minimal setup for compiling client side code with Webpack.</p><p data-block-key=\\\"61u09\\\">It will compile all files in client/styles css, client/scripts javascript and output them to webapp/static as bundle.css and bundle.js.</p><h3 data-block-key=\\\"de590\\\">Setup node and NPM</h3><p data-block-key=\\\"5rn05\\\">First lets make sure the node version used will always be the intended version 18.</p><p data-block-key=\\\"e2ucd\\\">In the root of your project run:</p>\"}, {\"id\": \"782daa03-8a42-4b7f-bdfa-b511f5b543aa\", \"type\": \"code\", \"value\": {\"code\": \"echo 18 > .nvmrc\", \"language\": \"bash\"}}, {\"id\": \"d5358e8f-6883-4406-ac0c-fd86a13365de\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"fu62r\\\">Install NVM (node version manager)</h3><p data-block-key=\\\"b2ecu\\\">Instructions can be viewed at <a href=\\\"https://github.com/nvm-sh/nvm\\\">https://github.com/nvm-sh/nvm</a> where you can choose your preferred installation method. I used brew on MacOS.</p>\"}, {\"id\": \"3b916dbf-eb10-4682-9a7f-cb526b126301\", \"type\": \"code\", \"value\": {\"code\": \"brew install nvm\", \"language\": \"bash\"}}, {\"id\": \"05fec8d6-735b-4820-ad96-dd653df623d3\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"17sgd\\\">Use node version 18</h3>\"}, {\"id\": \"fb6e3072-3750-4d09-bdb2-138ffaa8b59f\", \"type\": \"code\", \"value\": {\"code\": \"nvm use\", \"language\": \"bash\"}}, {\"id\": \"686ba7f7-a270-49e3-9308-4ffc3f178a0c\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"1fpeb\\\">If you don&#x27;t have the correct version of node installed a message will tell you that and you can install it with:</p>\"}, {\"id\": \"48827bdb-d1c5-4ba0-86d0-74e114736727\", \"type\": \"code\", \"value\": {\"code\": \"nvm install 18\", \"language\": \"bash\"}}, {\"id\": \"6c3820db-4af6-445f-871d-4471e8f6a633\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"adhk4\\\">Initialize NPM</h3>\"}, {\"id\": \"c38f8160-33b4-4818-9ceb-208bd12b1bf3\", \"type\": \"code\", \"value\": {\"code\": \"npm init\", \"language\": \"bash\"}}, {\"id\": \"8679cc93-80de-4b7a-ae54-e1cc674d65c0\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6c4so\\\">This will create a package.json file in the root of your project.</p><p data-block-key=\\\"ftj06\\\">Then install the required packages by running:</p>\"}, {\"id\": \"4e3bcc3a-0bfb-4456-9794-965b0750ae93\", \"type\": \"code\", \"value\": {\"code\": \"npm install --save-dev \\\\\\r\\n    @babel/preset-env \\\\\\r\\n    babel-loader \\\\\\r\\n    browser-sync-webpack-plugin \\\\\\r\\n    css-loader \\\\\\r\\n    mini-css-extract-plugin \\\\\\r\\n    sass \\\\\\r\\n    sass-loader \\\\\\r\\n    webpack \\\\\\r\\n    webpack-cli \\\\\\r\\n    webpack-dev-server\", \"language\": \"bash\"}}, {\"id\": \"588e7034-759a-45ec-8364-200ef86d7337\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"eek32\\\">This will have created a node_modules directory in the root of your project. It&#x27;s not a folder we need to commit to the repository so add it to the .gitignore file.</p>\"}, {\"id\": \"6e471733-f010-4cb5-a229-5adc1cf18c22\", \"type\": \"code\", \"value\": {\"code\": \"echo \\\"node_modules\\\" >> .gitignore\", \"language\": \"bash\"}}, {\"id\": \"56c121c4-dae3-4987-8cbb-50dd838d8036\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"7d22s\\\">Add Webpack configuration</h3><p data-block-key=\\\"1i20\\\">You can read more about Webpack at <a href=\\\"https://webpack.js.org/\\\">https://webpack.js.org/</a>.</p><p data-block-key=\\\"8fu4v\\\">Create a file <b>webpack.config.js</b> in the root of your project with the following content:</p><p data-block-key=\\\"ct7nq\\\"></p>\"}, {\"id\": \"673253dd-689e-43b0-b5a9-83f3d5347004\", \"type\": \"code\", \"value\": {\"code\": \"const path = require(\\\"path\\\");\\r\\nconst MiniCssExtractPlugin = require(\\\"mini-css-extract-plugin\\\");\\r\\nconst BrowserSyncPlugin = require(\\\"browser-sync-webpack-plugin\\\");\\r\\n\\r\\nmodule.exports = {\\r\\n  mode: \\\"production\\\", // or \\\"development\\\"\\r\\n  entry: path.resolve(__dirname, \\\"./client/scripts/index.js\\\"),\\r\\n  output: {\\r\\n    path: path.resolve(__dirname, \\\"./webapp/static/webapp\\\"),\\r\\n    filename: \\\"bundle.js\\\",\\r\\n  },\\r\\n  module: {\\r\\n    rules: [\\r\\n      {\\r\\n        test: /\\\\.js$/,\\r\\n        exclude: /node_modules/,\\r\\n        use: {\\r\\n          loader: \\\"babel-loader\\\",\\r\\n          options: {\\r\\n            presets: [\\\"@babel/preset-env\\\"],\\r\\n          },\\r\\n        },\\r\\n      },\\r\\n      {\\r\\n        test: /\\\\.scss$/,\\r\\n        use: [MiniCssExtractPlugin.loader, \\\"css-loader\\\", \\\"sass-loader\\\"],\\r\\n      },\\r\\n    ],\\r\\n  },\\r\\n  plugins: [\\r\\n    new MiniCssExtractPlugin({\\r\\n      filename: \\\"bundle.css\\\",\\r\\n    }),\\r\\n    new BrowserSyncPlugin({\\r\\n      host: \\\"localhost\\\",\\r\\n      port: 3000,\\r\\n      proxy: \\\"http://127.0.0.1:8000/\\\", // the port your django app will be running on in development\\r\\n      files: [\\\"./**/*.html\\\"],\\r\\n    }),\\r\\n  ],\\r\\n};\", \"language\": \"javascript\"}}, {\"id\": \"86b008de-4bd0-4d08-89a6-b64f777e5b00\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"6g6su\\\">Add client side code</h3><p data-block-key=\\\"9d8ph\\\">Create a directory called client in the root of your project with the following folders:</p>\"}, {\"id\": \"2abf49b5-e2db-457c-973e-a55a468083ff\", \"type\": \"code\", \"value\": {\"code\": \"mkdir -p client/{scripts,styles}\", \"language\": \"bash\"}}, {\"id\": \"7492330e-1535-4388-bd54-9c7bf67598ec\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"cu6n0\\\">Add styles</h3><p data-block-key=\\\"cjtt8\\\">Create a file client/styles/index.scss with the following content:</p><p data-block-key=\\\"3v417\\\"></p>\"}, {\"id\": \"2f319dd2-1d59-4e70-873c-1d5d39426968\", \"type\": \"code\", \"value\": {\"code\": \"body {\\r\\n  background-color: grey;\\r\\n}\", \"language\": \"css\"}}, {\"id\": \"edfa24ef-dcd2-424c-9f2c-955b3110ca0a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"ab6ak\\\"><b>Add javascript</b></p><p data-block-key=\\\"3fv6r\\\">Create a file client/scripts/index.js with the following content:</p>\"}, {\"id\": \"49a7187b-d74d-4156-9547-1a3a61e7d7fb\", \"type\": \"code\", \"value\": {\"code\": \"console.log(\\\"Awesome Wagtail !\\\");\", \"language\": \"javascript\"}}, {\"id\": \"7a2fbbec-c893-4e17-a7bf-657668b74bdf\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"b6er7\\\">Update the scripts section in the package.json file to:</p>\"}, {\"id\": \"8ddae73b-9420-4c20-a445-a333407bad37\", \"type\": \"code\", \"value\": {\"code\": \"\\\"scripts\\\": {\\r\\n  \\\"build\\\": \\\"webpack --mode production\\\",\\r\\n  \\\"start\\\": \\\"webpack --mode development --watch\\\"\\r\\n},\", \"language\": \"json\"}}, {\"id\": \"099e899a-5c8c-485f-8a97-9e6a22d454d9\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"fqig2\\\">Run Webpack</h3><p data-block-key=\\\"1tj01\\\">To compile the client side code during development run:</p>\"}, {\"id\": \"c7abec35-6fbc-4cb7-bd3b-672ced66b0b9\", \"type\": \"code\", \"value\": {\"code\": \"npm start # which will compile and watch for changes\", \"language\": \"bash\"}}, {\"id\": \"6e9676a6-c160-4808-a2fc-c474cc9aba74\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"2dqoj\\\">To compile the client side code for production run:</p>\"}, {\"id\": \"1c1adac8-8f44-46ee-bd73-f2d74889bfbc\", \"type\": \"code\", \"value\": {\"code\": \"npm run build # which will compile and minify the code\", \"language\": \"bash\"}}, {\"id\": \"1e26b465-7350-45b3-a9c9-ad93decfea76\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"c9sbu\\\">Running either of these commands will create a webapp/static/webapp directory containing bundle.css and bundle.js.</p><h2 data-block-key=\\\"h0ft\\\">Update the base template to use the compiled files</h2><p data-block-key=\\\"81rq1\\\">Open the webapp/templates/base.html file and update the head section to include the compiled css and javascript files:</p>\"}, {\"id\": \"7c35342c-b3c2-40ab-8f3c-9ca1572f3652\", \"type\": \"code\", \"value\": {\"code\": \"<!-- change -->\\r\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{% static 'css/webapp.css' %}\\\">\\r\\n<!-- to -->\\r\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{% static 'webapp/bundle.css' %}\\\">\\r\\n<!-- change -->\\r\\n<script src=\\\"{% static 'js/webapp.js' %}\\\"></script>\\r\\n<!-- to -->\\r\\n<script src=\\\"{% static 'webapp/bundle.js' %}\\\"></script>\", \"language\": \"html\"}}, {\"id\": \"33d2e1fb-e69c-453f-81d8-97fd0481dcd8\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"11pot\\\">You can delete the webapp/static/css and webapp/static/js directories and files as they are no longer needed.</p><h2 data-block-key=\\\"3vbt0\\\">Run the development server</h2><p data-block-key=\\\"2bde9\\\">In a new console run the development server (after activating the virtualenv):</p>\"}, {\"id\": \"682cab45-26a4-464b-8621-7e8d3f07b32b\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py runserver\", \"language\": \"bash\"}}, {\"id\": \"15a8d67b-7b24-4c15-8043-ccc15717ce89\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"da1c6\\\">As long as you are running the <b>npm start</b> command in the other console...</p><p data-block-key=\\\"85rb8\\\">Open your browser at <a href=\\\"http://localhost:3000/\\\">http://localhost:3000</a> and you should see the home page with a grey background and a message in the console.</p><p data-block-key=\\\"2afmb\\\">Try changing the background color in client/styles/index.scss and you should see the changes in the browser without having to refresh the page.</p><h2 data-block-key=\\\"3pv64\\\">Just for fun :-)</h2><p data-block-key=\\\"5g6tj\\\">Create a file client/scripts/logo.js with the following content:</p>\"}, {\"id\": \"31251878-15de-46ec-8e89-2f61ca840af4\", \"type\": \"code\", \"value\": {\"code\": \"class Logo {\\r\\n  constructor() {\\r\\n        this.logo = document.getElementsByClassName('logo')[0];\\r\\n        this.header = document.getElementsByClassName('header')[0];\\r\\n    }\\r\\n\\r\\n    init() {\\r\\n      setTimeout(() => {\\r\\n        this.logo.classList.add('logo--fade-in');\\r\\n            this.header.classList.add('header--slope');\\r\\n        }, 1000);\\r\\n    }\\r\\n}\\r\\n\\r\\nmodule.exports = Logo;\", \"language\": \"javascript\"}}, {\"id\": \"2fb946ee-fc33-4626-ad72-fd0e92ace6c9\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6i44k\\\">Update client/scripts/index.js to the following:</p>\"}, {\"id\": \"533b0532-4437-4842-8146-23f3204c1528\", \"type\": \"code\", \"value\": {\"code\": \"import \\\"../styles/index.scss\\\";\\r\\nimport Logo from \\\"./logo.js\\\";\\r\\n\\r\\nconst logo = new Logo();\\r\\nlogo.init();\", \"language\": \"javascript\"}}, {\"id\": \"3fb72dab-e272-4990-8756-ddce38ad6bd4\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bli3g\\\">Create a file client/styles/_vars.scss with the following content:</p>\"}, {\"id\": \"daac85a5-de53-48cb-91b7-1d1cb417de05\", \"type\": \"code\", \"value\": {\"code\": \"$background-color: #43b1b0;\\r\\n$foreground-color: #fff;\", \"language\": \"css\"}}, {\"id\": \"ae0bdae5-b932-49bb-a706-1a2fd648ff97\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"d5cs4\\\">Alter the client/styles/index.scss file to the following:</p>\"}, {\"id\": \"0485e308-3d73-4b43-b450-c4ffd494a112\", \"type\": \"code\", \"value\": {\"code\": \"@import \\\"./vars\\\";\\r\\n\\r\\nbody {\\r\\n  background-color: $background-color;\\r\\n}\\r\\n\\r\\nh2, a {\\r\\n  color: $foreground-color !important;\\r\\n}\\r\\n\\r\\nsvg .egg {\\r\\n  fill: $foreground-color;\\r\\n}\\r\\n\\r\\n.logo--fade-in {\\r\\n  animation: fade-in 1s ease-out;\\r\\n  animation-fill-mode: forwards;\\r\\n  svg g {\\r\\n    fill: white;\\r\\n  }\\r\\n}\\r\\n\\r\\n@keyframes fade-in {\\r\\n  0% {\\r\\n    opacity: 0.2;\\r\\n    transform: scale(1);\\r\\n  }\\r\\n  75% {\\r\\n    opacity: 0.8;\\r\\n    transform: scale(1.8) translateX(10%);\\r\\n  }\\r\\n  100% {\\r\\n    opacity: 1;\\r\\n    transform: scale(1.4) translateX(0) translateY(20px) rotate(0deg);\\r\\n  }\\r\\n}\\r\\n\\r\\n.header--slope {\\r\\n  animation: slope 1s ease-in-out;\\r\\n  animation-fill-mode: forwards;  \\r\\n}\\r\\n\\r\\n@keyframes slope {\\r\\n  0% {\\r\\n    transform: rotate(0deg);\\r\\n  }\\r\\n  90% {\\r\\n    transform: rotate(0deg);\\r\\n  }\\r\\n  100% {\\r\\n    transform: rotate(-2deg);\\r\\n  }\\r\\n}\", \"language\": \"css\"}}, {\"id\": \"94be5fb4-4f60-45f1-af41-22e5f6bddc68\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"eon8u\\\">With npm start still running: If you view the Wagtail start page (home) it&#x27;s going to look a little different.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.articlechapterpage",
  "pk": 28,
  "fields": {
    "body": "[{\"id\": \"0cb2e3ae-5a2a-4b4f-bfb7-061d14c170c4\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"18ase\\\"><i>This step is entirely optional but is recommended.</i></p><h2 data-block-key=\\\"2pljs\\\">Pre-commit</h2><p data-block-key=\\\"9o3ih\\\"><a href=\\\"https://pre-commit.com/\\\">Pre-commit</a> is a tool that runs git hooks on your code before you commit it. It&#x27;s a great way to ensure your code is formatted correctly and passes some basic checks before you commit it.</p><p data-block-key=\\\"8ujrj\\\">It will run black, isort and flake8 on my code and check for missing migrations and also that requirements.txt is up to date before I commit it.</p><h3 data-block-key=\\\"de64j\\\">Install pre-commit</h3><p data-block-key=\\\"37hn1\\\">Add pre-commit to the development dependencies in Pipfile:</p>\"}, {\"id\": \"69cd30d2-4020-4570-ad35-26aee8288a7d\", \"type\": \"code\", \"value\": {\"code\": \"pipenv install --dev pre-commit\", \"language\": \"bash\"}}, {\"id\": \"8f29ce66-6acd-4d77-bf55-4e8f42b86f4b\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"au7e3\\\">If you already have pre-commit installed globally, you can skip this step.</p><h3 data-block-key=\\\"dvfe2\\\">Configure pre-commit</h3><p data-block-key=\\\"d90hp\\\">Create a .pre-commit-config.yaml file in the root of the project and add the following content:</p><p data-block-key=\\\"1kv4c\\\"></p>\"}, {\"id\": \"173161d8-d3fe-4e64-b386-fd31a50b5df9\", \"type\": \"code\", \"value\": {\"code\": \"repos:\\r\\n  # These hooks make sure that the code is formatted correctly\\r\\n  - repo: https://github.com/pycqa/isort\\r\\n    rev: 5.12.0\\r\\n    hooks:\\r\\n      - id: isort\\r\\n  - repo: https://github.com/psf/black\\r\\n    rev: 23.7.0\\r\\n    hooks:\\r\\n      - id: black\\r\\n  - repo: https://github.com/pycqa/flake8\\r\\n    rev: 6.1.0\\r\\n    hooks:\\r\\n      - id: flake8\\r\\n\\r\\n  # These hooks make sure that the requirements.txt file is up to date\\r\\n  # with the latest changes to pipenv as well as making sure migrations\\r\\n  # are up to date.\\r\\n  - repo: local\\r\\n    hooks:\\r\\n      - id: check-dependencies\\r\\n        name: Check dependencies\\r\\n        entry: ./checks/dependencies.sh\\r\\n        language: system\\r\\n        types: [python]\\r\\n        pass_filenames: false\\r\\n        always_run: true\\r\\n        stages: [pre-commit]\\r\\n      - id: check-migrations\\r\\n        name: Check migrations\\r\\n        entry: ./checks/migrations.sh\\r\\n        language: system\\r\\n        types: [python]\\r\\n        pass_filenames: false\\r\\n        always_run: true\\r\\n        stages: [commit]\\r\\n      - id: check-static\\r\\n        name: Check static files\\r\\n        entry: ./checks/static.sh\\r\\n        language: system\\r\\n        types: [css, javascript]\\r\\n        pass_filenames: false\\r\\n        always_run: true\\r\\n        stages: [pre-commit]\", \"language\": \"yaml\"}}, {\"id\": \"86b7fb39-afa4-4b1c-94e2-3e701c940ae0\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"22tgb\\\">Add the git hook entry points</h2><p data-block-key=\\\"2bhju\\\">Create a checks directory in the root of the project and add the following files:</p>\"}, {\"id\": \"739ab79d-4bf7-4513-9aa2-40d3cc28124e\", \"type\": \"code\", \"value\": {\"code\": \"mkdir checks\\r\\ntouch checks/dependencies.sh\\r\\ntouch checks/migrations.sh\\r\\ntouch checks/static.sh\\r\\nchmod +x checks/*.sh\", \"language\": \"bash\"}}, {\"id\": \"1cd25c0f-4b55-4101-b70b-99a640d9136d\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"1jis9\\\">Update the content of each file as follows:</p><p data-block-key=\\\"e9kr7\\\">File checks/dependencies.sh:</p>\"}, {\"id\": \"0427f78c-5ec6-400a-9969-084cea577d06\", \"type\": \"code\", \"value\": {\"code\": \"#!/bin/bash\\r\\n\\r\\n# Get the contents of requirements.txt\\r\\nrequirements=$(cat requirements.txt)\\r\\n\\r\\n# Get the output from pipenv requirements\\r\\npipenv_requirements=$(pipenv requirements)\\r\\n\\r\\n# Compare the two outputs\\r\\nif [ \\\"$requirements\\\" == \\\"$pipenv_requirements\\\" ]; then\\r\\n  echo \\\"Requirements are correct\\\"\\r\\nelse\\r\\n  echo \\\"Requirements are different, please run pipenv requirements > requirements.txt and stage the changes\\\"\\r\\n  exit 1\\r\\nfi\", \"language\": \"bash\"}}, {\"id\": \"4e995efa-c60c-4b6a-8c32-d69adaeba15e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"f0o8\\\">File checks/migrations.sh:</p>\"}, {\"id\": \"2753115d-6a9d-4c6b-84dd-de37d4a6598a\", \"type\": \"code\", \"value\": {\"code\": \"#!/bin/bash\\r\\n\\r\\n# Check if MySQL is already running\\r\\n# so we can stop it after the checks if it was started here.\\r\\nif docker-compose top | grep mysqld 2> /dev/null; then\\r\\n    echo \\\"MySQL is running.\\\"\\r\\n    MYSQL_RUNNING=true\\r\\nelse\\r\\n    echo \\\"MySQL is not running.\\\"\\r\\n    MYSQL_RUNNING=false\\r\\nfi\\r\\n\\r\\nif [ \\\"$MYSQL_RUNNING\\\" = false ]; then\\r\\n    docker-compose up -d db\\r\\n    echo \\\"MySQL has been started.\\\"\\r\\nfi\\r\\n\\r\\nif pipenv run python manage.py makemigrations --check --dry-run; then\\r\\n    # There are no changes to migrations\\r\\n    if [ \\\"$MYSQL_RUNNING\\\" = false ]; then\\r\\n        docker-compose stop db\\r\\n        echo \\\"MySQL has been stopped.\\\"\\r\\n    fi\\r\\n    exit 0\\r\\nelse\\r\\n    # There are changes to migrations\\r\\n    echo \\\"Migrations are out of date. Please run 'pipenv run python manage.py makemigrations' and commit the changes.\\\"\\r\\n    # If MySQL was not originally running, stop it before exiting\\r\\n    if [ \\\"$MYSQL_RUNNING\\\" = false ]; then\\r\\n        docker-compose stop db\\r\\n        echo \\\"MySQL has been stopped.\\\"\\r\\n    fi\\r\\n    exit 1\\r\\nfi\", \"language\": \"bash\"}}, {\"id\": \"c64784cd-b323-42ba-ae8c-0d91c5ee2296\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"3dhcf\\\">File checks/static.sh:</p>\"}, {\"id\": \"89e52f7d-9c00-4c36-bd26-2f5d4aeb951a\", \"type\": \"code\", \"value\": {\"code\": \"#!/bin/bash\\r\\n\\r\\n# This script generates production-ready files for the scripts and styles\\r\\n# It runs npm run build\\r\\n# If files are changed then fails\\r\\n\\r\\n# Exit on error\\r\\nset -e\\r\\n\\r\\n# Run npm run build\\r\\nnpm run build\", \"language\": \"bash\"}}, {\"id\": \"4fb0575e-5806-4df7-a454-0cd00e95a043\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"5jrs6\\\">Use Pipenv to install some development dependencies</h3>\"}, {\"id\": \"e21f14a8-e771-4320-a6be-d5ea854fb97d\", \"type\": \"code\", \"value\": {\"code\": \"pipenv install --dev black==23.7.0 pre-commit==3.3.3 flake8==6.1.0 isort==5.12.0 tomli==2.0.1\", \"language\": \"bash\"}}, {\"id\": \"d727f548-6a40-44ec-ac5d-30d495ab8ef0\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"a4r0g\\\">I&#x27;ve pinned the versions of the development dependencies to the same versions as the pre-commit hooks.</p><h3 data-block-key=\\\"f9jk\\\">Install the pre-commit hooks</h3>\"}, {\"id\": \"5096b294-ba11-4a0f-9bfe-409601088665\", \"type\": \"code\", \"value\": {\"code\": \"pipenv run pre-commit install\", \"language\": \"bash\"}}, {\"id\": \"9eeb4d83-b66b-4da1-9a17-d56c694bd61f\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"e8k4i\\\">You can use the <b>pre-commit install</b> command to initialize pre-commit. You can also run <b>pre-commit uninstall</b> to remove the hooks.</p><h3 data-block-key=\\\"culb8\\\">Run the pre-commit hooks</h3>\"}, {\"id\": \"3ef30389-f53d-4e18-b44d-f44ae8b6fe0d\", \"type\": \"code\", \"value\": {\"code\": \"pipenv run pre-commit run --all-files\", \"language\": \"bash\"}}, {\"id\": \"9ca34f1c-0229-4c28-b1fb-ffdfa92a3188\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"bcibm\\\">If this is the first time running pre-commit you&#x27;ll probably see some file changes have been made. You can commit these changes and then run the pre-commit hooks again to make sure everything is ok.</p><h3 data-block-key=\\\"dap87\\\">Commit the changes</h3>\"}, {\"id\": \"28df97f7-c998-448a-b430-8933542beb74\", \"type\": \"code\", \"value\": {\"code\": \"git add .\\r\\ngit commit -m \\\"add your commit message here\\\"\", \"language\": \"bash\"}}, {\"id\": \"8086561b-96ef-4aa9-af7b-1e183724b7aa\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"8rtcl\\\">Having pre-commit installed means that every time you commit code, the pre-commit hooks will run and check your code. </p><p data-block-key=\\\"ab701\\\">If there are any errors, the commit will fail and you&#x27;ll need to fix the errors before you can commit again.</p>\"}, {\"id\": \"deb94668-1a23-41cc-9dac-8dba53864d74\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"eheut\\\">Make sure you have stopped the npm server before you commit, the one you started with npm start.</p>\"}]",
    "excerpt": ""
  }
},
{
  "model": "pages.packageindexpage",
  "pk": 5,
  "fields": {
    "body": "[]"
  }
},
{
  "model": "pages.packagepage",
  "pk": 20,
  "fields": {
    "body": "[{\"id\": \"1acd834a-51ad-4914-9519-7e925d493f51\", \"type\": \"heading\", \"value\": {\"level\": \"h2\", \"heading\": \"Create a page in Wagtail CMS that has a corresponding QR Code.\"}}, {\"id\": \"fe13f435-0cc5-48a2-9ea7-cfa2a33b6f85\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"4t6t8\\\">Features</h3><ul><li data-block-key=\\\"2jrqb\\\">The generated QR Code is saved as an EPS document that can be printed.</li><li data-block-key=\\\"f8jq6\\\">When scanned it will link to the page via a redirect using the page ID</li><li data-block-key=\\\"7bu10\\\">You can download the generated QR code and use it in printed advertising like posters, postcards, banners, beer mats and more.</li><li data-block-key=\\\"7dpo\\\">When saving a draft or publishing a page you can add a one-time email address to send the qr-code to as an attachment.</li></ul><p data-block-key=\\\"fc64u\\\">Source code: <a href=\\\"https://github.com/wagtail-packages/wagtail-qrcode\\\">https://github.com/wagtail-packages/wagtail-qrcode</a></p>\"}, {\"id\": \"85b81f54-c6a2-4cd3-b14a-e53c2196ca0f\", \"type\": \"image_aligned_block\", \"value\": {\"image\": 1, \"content\": \"\", \"alignment\": \"center\"}}, {\"id\": \"0838dd8f-4d04-4424-a092-4865e3ac866b\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"dijlj\\\">Installation</h2><p data-block-key=\\\"7u34j\\\">To add the package to your own Wagtail CMS, install the package into your environment.</p>\"}, {\"id\": \"0575ffba-407d-4467-bbce-ab04de4249a4\", \"type\": \"code\", \"value\": {\"code\": \"pip install wagtail-qrcode\", \"language\": \"bash\"}}, {\"id\": \"25c415dd-bc44-42fa-8484-8788fc9339f1\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"b7qjn\\\">Add the package to your site settings.</p><p data-block-key=\\\"6sdfi\\\"></p>\"}, {\"id\": \"ee4f6415-64ee-43a4-b0fd-cc8622fb4b7a\", \"type\": \"code\", \"value\": {\"code\": \"INSTALLED_APPS = [\\r\\n    # ...\\r\\n    \\\"wagtail_qrcode\\\",\\r\\n    # ...\\r\\n]\", \"language\": \"python\"}}, {\"id\": \"92963930-c29c-4dfb-9e5f-11130950484e\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"5rig1\\\">Add this setting to your Wagtail settings. It is used to generate the base url for the QR code</p>\"}, {\"id\": \"ebdbf23e-1ed4-4cb6-b5c7-3141237d324c\", \"type\": \"code\", \"value\": {\"code\": \"WAGTAIL_QR_CODE_BASE_URL = \\\"your-site-url\\\"\", \"language\": \"python\"}}, {\"id\": \"b59d09ba-5c3b-40cf-a8e5-7283a16803cd\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"3huyc\\\">You&#x27;ll likely want to test the QRcode using another device. Your device will need to be able to resolve your testing domain and localhost probably won&#x27;t work.</p><p data-block-key=\\\"6rr4a\\\">Try using a service like <a href=\\\"https://ngrok.com/\\\">ngrok</a> to set up a url to your localhost and use that domain name as in the WAGTAIL_QR_CODE_BASE_URL setting.</p><p data-block-key=\\\"c36lb\\\">This is the command I use to start ngrok.</p><p data-block-key=\\\"9k5fk\\\">./ngrok http 8000 --scheme=http</p>\"}, {\"id\": \"0524fecb-d08a-4459-ad59-0644c0887a23\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"77a9u\\\">Using the QRCode page model mixin</h3><p data-block-key=\\\"1hl5j\\\">Use the model mixin in a new or an existing page model.</p>\"}, {\"id\": \"87ad9df2-7f84-4044-8207-3c224b8f7b54\", \"type\": \"code\", \"value\": {\"code\": \"# models.py\\r\\n\\r\\nfrom wagtail.admin.panels import (\\r\\n    FieldPanel,\\r\\n    MultiFieldPanel,\\r\\n    ObjectList,\\r\\n    TabbedInterface,\\r\\n)\\r\\nfrom wagtail.models import Page\\r\\n\\r\\nfrom wagtail_qrcode.admin_forms import QrCodeEmailForm\\r\\nfrom wagtail_qrcode.models import QRCodeMixin\\r\\n\\r\\n\\r\\nclass QRCodePage(QRCodeMixin, Page):\\r\\n    qrcode_panels = QRCodeMixin.panels + [\\r\\n        MultiFieldPanel(\\r\\n            [\\r\\n                FieldPanel(\\\"email_address\\\"),\\r\\n                FieldPanel(\\\"email_subject\\\"),\\r\\n                FieldPanel(\\\"email_body\\\"),\\r\\n            ],\\r\\n            heading=\\\"Send QR code via email\\\",\\r\\n        )\\r\\n    ]\\r\\n\\r\\n    edit_handler = TabbedInterface(\\r\\n        [\\r\\n            ObjectList(Page.content_panels, heading=\\\"Content\\\"),\\r\\n            ObjectList(Page.promote_panels, heading=\\\"Promote\\\"),\\r\\n            ObjectList(Page.settings_panels, heading=\\\"Settings\\\", classname=\\\"settings\\\"),\\r\\n            ObjectList(qrcode_panels, heading=\\\"QR Code\\\", classname=\\\"qr-code\\\"),\\r\\n        ]\\r\\n    )\\r\\n\\r\\n    base_form_class = QrCodeEmailForm\", \"language\": \"python\"}}, {\"id\": \"efc26582-c6a7-49b1-b466-547090468a8a\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"csma4\\\">This will add a new tab in the page editor QR Code where you can preview the generated QR code and access the downloadable print ready EPS file. (the file can also be found in the documents app)</p><p data-block-key=\\\"2p8mn\\\"><b>If you don&#x27;t need to be able to send the qrcode via email your page model can be</b></p>\"}, {\"id\": \"800416ee-4feb-4003-a88d-c043f8b3c1e0\", \"type\": \"code\", \"value\": {\"code\": \"# models.py\\r\\n\\r\\nfrom wagtail.admin.panels import (\\r\\n    FieldPanel,\\r\\n    MultiFieldPanel,\\r\\n    ObjectList,\\r\\n    TabbedInterface,\\r\\n)\\r\\nfrom wagtail.models import Page\\r\\n\\r\\nfrom wagtail_qrcode.models import QRCodeMixin\\r\\n\\r\\n\\r\\nclass QRCodePage(QRCodeMixin, Page):\\r\\n    qrcode_panels = QRCodeMixin.panels\\r\\n\\r\\n    edit_handler = TabbedInterface(\\r\\n        [\\r\\n            ObjectList(Page.content_panels, heading=\\\"Content\\\"),\\r\\n            ObjectList(Page.promote_panels, heading=\\\"Promote\\\"),\\r\\n            ObjectList(Page.settings_panels, heading=\\\"Settings\\\", classname=\\\"settings\\\"),\\r\\n            ObjectList(qrcode_panels, heading=\\\"QR Code\\\", classname=\\\"qr-code\\\"),\\r\\n        ]\\r\\n    )\", \"language\": \"python\"}}, {\"id\": \"f4859a40-34fe-4677-8c64-aa073affa6e3\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"bemqp\\\">URLS</h3><p data-block-key=\\\"7jbb4\\\">Include the wagtail-qrcode urls in your site urls before wagtail_urls.</p>\"}, {\"id\": \"ea569665-2e5e-4418-894c-156d79694ff0\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"3huyc\\\">The url provides the redirect endpoint when the qr-code is scanned and viewed in a browser.</p>\"}, {\"id\": \"585deb63-f3a4-44a3-b51e-e2f63b50546c\", \"type\": \"code\", \"value\": {\"code\": \"urlpatterns = [\\r\\n    # ...\\r\\n    path(\\\"qr-code/\\\", include(\\\"wagtail_qrcode.urls\\\")),\\r\\n    # ...\\r\\n]\\r\\n\\r\\n# or import the view and pass the view in the path function\\r\\n\\r\\nfrom wagtail_qrcode.views import qr_code_page_view\\r\\n\\r\\nurlpatterns = [\\r\\n    # ...\\r\\n    path(\\\"qr-code/\\\", qr_code_page_view, name=\\\"qr-code-view\\\"),\\r\\n    # ...\\r\\n]\", \"language\": \"python\"}}, {\"id\": \"f35dd9a1-d9e7-4fa7-8e32-460f9ac598ef\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"9gkkh\\\">Configuration</h2><p data-block-key=\\\"18c5k\\\">Set the configuration (optional, these are the defaults)</p><ul><li data-block-key=\\\"8p35o\\\">collection_name: is automatically created and used as the collection for all generated QR codes</li><li data-block-key=\\\"9cqgq\\\">scale: the size of the dots in the QR code</li><li data-block-key=\\\"29rgi\\\">quiet_zone: the plain border around the QR code</li><li data-block-key=\\\"4q1ts\\\">svg_has_xml_declaration: does the QR code SVG have an XML declaration</li><li data-block-key=\\\"62mh8\\\">svg_has_doc_type_declaration: does the QR code SVG have an HTML doc-type</li></ul>\"}, {\"id\": \"4d904202-2c05-467a-92cd-fad0619a3435\", \"type\": \"code\", \"value\": {\"code\": \"WAGTAIL_QR_CODE = {\\r\\n    \\\"collection_name\\\": \\\"QR Codes\\\",\\r\\n    \\\"scale\\\": 3,\\r\\n    \\\"quiet_zone\\\": 6,\\r\\n    \\\"svg_has_xml_declaration\\\": False,\\r\\n    \\\"svg_has_doc_type_declaration\\\": False,\\r\\n}\", \"language\": \"python\"}}]",
    "date": "2023-08-29",
    "excerpt": "Create a page in Wagtail CMS that has a corresponding QR Code.",
    "pypi_package_name": "wagtail-qrcode"
  }
},
{
  "model": "pages.packagepage",
  "pk": 29,
  "fields": {
    "body": "[{\"id\": \"5d91ff48-40e1-4fc0-9ac9-e7981a4abae7\", \"type\": \"heading\", \"value\": {\"level\": \"h2\", \"heading\": \"Helps to reduce form spam by tricking bots into submitting data in fields that should remain empty.\"}}, {\"id\": \"a530905c-e74f-4dc8-9e2a-404b2a774e21\", \"type\": \"image_aligned_block\", \"value\": {\"image\": 3, \"content\": \"\", \"alignment\": \"center\"}}, {\"id\": \"13954ef4-099d-481a-af95-f9e512580539\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"jtc07\\\">The package provides validation that a hidden text field that should remain empty and checks a time interval between the form being displayed and submitted.</p><p data-block-key=\\\"4lpfj\\\">Source code: <a href=\\\"https://github.com/wagtail-packages/wagtail-honeypot\\\">https://github.com/wagtail-packages/wagtail-honeypot</a></p><h2 data-block-key=\\\"3hoo7\\\">How it works</h2><p data-block-key=\\\"cs1bi\\\">When the Wagtail Form is submitted and the honeypot protection is enabled, the honeypot fields &amp; values are available in the POST data.</p><p data-block-key=\\\"f1oqi\\\">If the form is submitted with content in the hidden field or before the interval expires the submission is ignored.</p><ul><li data-block-key=\\\"dsumk\\\">No email is sent</li><li data-block-key=\\\"88avq\\\">No submission is stored</li><li data-block-key=\\\"3t5ui\\\">The thank you page is always shown if available.</li></ul><h2 data-block-key=\\\"43lmu\\\">Installation and setup</h2><p data-block-key=\\\"1ug8g\\\">Add the package to your python environment.</p>\"}, {\"id\": \"c69e143f-cfa6-4f4d-8104-309e7d3c498d\", \"type\": \"code\", \"value\": {\"code\": \"pip install wagtail-honeypot\", \"language\": \"bash\"}}, {\"id\": \"d6460773-b718-4a40-ad42-f88d30a801a5\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"7drfi\\\">Add the package to your settings</p>\"}, {\"id\": \"694c8e33-827b-49ae-a6d3-c6445ba0ffca\", \"type\": \"code\", \"value\": {\"code\": \"INSTALLED_APPS = [\\r\\n    ...\\r\\n    \\\"wagtail_honeypot\\\",\\r\\n    ...\\r\\n]\", \"language\": \"python\"}}, {\"id\": \"f9631a20-249e-4848-8124-aca8afe7b327\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"3o35n\\\">The HoneypotFormMixin &amp; HoneypotFormSubmissionMixin</h3><p data-block-key=\\\"88b3t\\\">They will add a honeypot <a href=\\\"https://github.com/wagtail-packages/wagtail-honeypot/blob/release/wagtail_honeypot/models.py#L13\\\">enable/disable</a> field to your form page model and custom form submission method.</p><p data-block-key=\\\"1164n\\\">If you follow the official Wagtail docs for the <a href=\\\"https://docs.wagtail.org/en/stable/reference/contrib/forms/index.html\\\">Form Builder</a> your form should look something like this...</p>\"}, {\"id\": \"21772e85-31ad-4999-882e-0deab81d2895\", \"type\": \"code\", \"value\": {\"code\": \"from wagtail_honeypot.models import (\\r\\n    HoneypotFormMixin, HoneypotFormSubmissionMixin\\r\\n)\\r\\n\\r\\nclass FormField(AbstractFormField):\\r\\n    page = ParentalKey(\\\"FormPage\\\", related_name=\\\"form_fields\\\")\\r\\n\\r\\nclass FormPage(HoneypotFormMixin, HoneypotFormSubmissionMixin):\\r\\n    intro = RichTextField(blank=True)\\r\\n    thank_you_text = RichTextField(blank=True)\\r\\n\\r\\n    content_panels = AbstractEmailForm.content_panels + [\\r\\n        FieldPanel(\\\"intro\\\", classname=\\\"full\\\"),\\r\\n        InlinePanel(\\\"form_fields\\\", label=\\\"Form fields\\\"),\\r\\n        FieldPanel(\\\"thank_you_text\\\", classname=\\\"full\\\"),\\r\\n        MultiFieldPanel(\\r\\n            [\\r\\n                FieldRowPanel(\\r\\n                    [\\r\\n                        FieldPanel(\\\"from_address\\\", classname=\\\"col6\\\"),\\r\\n                        FieldPanel(\\\"to_address\\\", classname=\\\"col6\\\"),\\r\\n                    ]\\r\\n                ),\\r\\n                FieldPanel(\\\"subject\\\"),\\r\\n            ],\\r\\n            \\\"Email\\\",\\r\\n        ),\\r\\n    ]\\r\\n\\r\\n    honeypot_panels = [\\r\\n        MultiFieldPanel(\\r\\n            [FieldPanel(\\\"honeypot\\\")],\\r\\n            heading=\\\"Reduce Form Spam\\\",\\r\\n        )\\r\\n    ]\\r\\n\\r\\n    edit_handler = TabbedInterface(\\r\\n        [\\r\\n            ObjectList(content_panels, heading=\\\"Content\\\"),\\r\\n            ObjectList(honeypot_panels, heading=\\\"Honeypot\\\"),\\r\\n            ObjectList(Page.promote_panels, heading=\\\"Promote\\\"),\\r\\n            ObjectList(Page.settings_panels, heading=\\\"Settings\\\", classname=\\\"settings\\\"),\\r\\n        ]\\r\\n    )\", \"language\": \"python\"}}, {\"id\": \"d5f27ff2-b05b-4635-8a1b-dcc532e3800f\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"c43eh\\\">If you prefer you could add the honeypot field to the content_panels rather than a new Tab</p>\"}, {\"id\": \"45d77a8b-a52c-4e6f-be15-c372d92f1da3\", \"type\": \"code\", \"value\": {\"code\": \"# replace\\r\\nedit_handler = TabbedInterface(\\r\\n        [\\r\\n            ObjectList(content_panels, heading=\\\"Content\\\"),\\r\\n            ObjectList(honeypot_panels, heading=\\\"Honeypot\\\"),\\r\\n            ObjectList(Page.promote_panels, heading=\\\"Promote\\\"),\\r\\n            ObjectList(Page.settings_panels, heading=\\\"Settings\\\", classname=\\\"settings\\\"),\\r\\n        ]\\r\\n    )\\r\\n\\r\\n# with\\r\\ncontent_panels = content_panels + honeypot_panels\", \"language\": \"python\"}}, {\"id\": \"d476e66b-de89-4677-bf2c-cf508811a046\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"4paen\\\">Run <i>python manage.py makemigrations</i> and <i>python manage.py migrate</i> here</p><h2 data-block-key=\\\"dutho\\\">Honeypot Template Tag</h2><p data-block-key=\\\"2fdvg\\\">Add the following template tag loader to your form page.</p>\"}, {\"id\": \"d35ebdbc-5f6e-4f32-b269-7b3a9f45ebd0\", \"type\": \"code\", \"value\": {\"code\": \"{% load honeypot_tags %}\\r\\n\\r\\n<!-- Add the Honeypot fields template tag anywhere inside the form -->\\r\\n<form>\\r\\n...\\r\\n{% honeypot_fields page.honeypot %}\\r\\n...\\r\\n</form>\", \"language\": \"html\"}}, {\"id\": \"0b9d8803-afcf-422d-a3c8-3677fe180d90\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"8nah2\\\">In your Wagtail site you should now be able to add a new form page and <i>enable the honeypot field</i>.</p><p data-block-key=\\\"2o1oa\\\"><i>Test that the honey pot field works</i></p><p data-block-key=\\\"c34si\\\">View the newly created form page. The honeypot field is visible and could be submitted with any value. Test it out by submitting the form with the honeypot field set to any value.</p><p data-block-key=\\\"5bqe8\\\">It won&#x27;t save the form submission or send an email if you have enabled that in your form page.</p><h2 data-block-key=\\\"504k0\\\">Hide the Honeypot field</h2><p data-block-key=\\\"4a9pm\\\">The honeypot field should be invisible when viewed in a browser.</p><p data-block-key=\\\"9ke2a\\\"><i>Use CSS &amp; JS to hide the honeypot field</i></p><p data-block-key=\\\"2kddo\\\">The package has some <a href=\\\"https://github.com/wagtail-packages/wagtail-honeypot/tree/release/wagtail_honeypot/static\\\">basic css and javascript</a> you can use to hide the field.</p><p data-block-key=\\\"76bqd\\\">Example: add the following to your form template.</p>\"}, {\"id\": \"f9169682-ecfd-44f5-ab6a-57fd2e971bbc\", \"type\": \"code\", \"value\": {\"code\": \"<!-- recommended: to add both but you can use one or the other -->\\r\\n\\r\\n{% block extra_css %}\\r\\n<link rel=\\\"stylesheet\\\" href=\\\"{% static 'css/honeypot.css' %}\\\">\\r\\n{% endblock extra_css %}\\r\\n\\r\\n<!-- alternative: but without the css above loaded first the field could be seen for a flash while the page loads -->\\r\\n\\r\\n{% block extra_js %}\\r\\n<script src=\\\"{% static 'js/honeypot.js' %}\\\"></script>\\r\\n{% endblock extra_js %}\", \"language\": \"html\"}}, {\"id\": \"2209fb70-5a1c-44a3-bcfe-7144afc899ba\", \"type\": \"callout\", \"value\": \"<p data-block-key=\\\"kyjx1\\\">The field should be visibly hidden and not be available to receive any value from a site visitor.</p><p data-block-key=\\\"fqqdi\\\">When rendered, the fields will have the HTML attributes tabindex=&quot;-1&quot; autocomplete=&quot;off&quot; to prevent a site visitor from using the tab key to move to the field and disable any autocomplete browser functions.</p>\"}]",
    "date": "2023-09-01",
    "excerpt": "Add optional honeypot protection to your Wagtail forms",
    "pypi_package_name": "wagtail-honeypot"
  }
},
{
  "model": "pages.packagepage",
  "pk": 30,
  "fields": {
    "body": "[{\"id\": \"367a7ef0-7148-4343-a455-0c27c9c3ae98\", \"type\": \"heading\", \"value\": {\"level\": \"h2\", \"heading\": \"An alternative Wagtail richtext filter that can be configured in your apps settings.\"}}, {\"id\": \"a6f1f355-2a6f-4130-b51e-dc210edb16ac\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"ks518\\\">It can parse the content in a RichText field in the same way the Wagtail richtext filter works and add classes or inline styles to the HTML.</p><p data-block-key=\\\"bcu68\\\">Once the package is added to your Wagtail site, add one or two pieces of configuration to your settings then use the f_richtext template tag where you want the css classes or inline styles added to the HTML content.</p><p data-block-key=\\\"egaag\\\">It&#x27;s especially useful if you are including a CSS framework such <a href=\\\"https://bulma.io/\\\">Bulma</a>, <a href=\\\"https://codyhouse.co/\\\">CodyHouse</a>, <a href=\\\"https://tachyons.io/\\\">Tachyons</a>, <a href=\\\"https://tailwindcss.com/\\\">Tailwind</a> other frameworks are available :)</p><p data-block-key=\\\"3lo1p\\\">Source code: <a href=\\\"https://github.com/wagtail-packages/wagtail-f-richtext\\\">https://github.com/wagtail-packages/wagtail-f-richtext</a></p><h2 data-block-key=\\\"d0n2d\\\">Installation</h2><p data-block-key=\\\"39oaa\\\">Install the package into your python environment.</p>\"}, {\"id\": \"554ef76d-adb3-40c8-be28-f61507e709b3\", \"type\": \"code\", \"value\": {\"code\": \"pip install wagtail-f-richext\", \"language\": \"bash\"}}, {\"id\": \"e61a59e0-3e26-4341-944e-65b6498abfe5\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"1gvir\\\">Add the package &quot;wagtail_f_richtext&quot; to your INSTALLED_APS</p><p data-block-key=\\\"ff2m2\\\">Any css framework styles will need to be installed before you will see any style changes for richtext content. If you are using only the inline styles you should see the effect of them applied when a page is viewed.</p><h2 data-block-key=\\\"1l769\\\">Using the f_richtext filter</h2><p data-block-key=\\\"cjkpb\\\"><b>with a RichText field</b></p>\"}, {\"id\": \"f9e4a6af-67b3-41ff-993d-6444f135435b\", \"type\": \"code\", \"value\": {\"code\": \"<!-- will add classes to the HTML tags -->\\r\\n{{ page.body|f_richtext:\\\"framework\\\" }}\\r\\n\\r\\n<!-- will add inline styles to the HTML tags -->\\r\\n{{ page.body|f_richtext:\\\"inline_styles\\\" }}\", \"language\": \"html\"}}, {\"id\": \"9ea6842b-bb65-4c4b-9b44-42d9d96e9706\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"25bo7\\\"><b>with a RichText block</b></p>\"}, {\"id\": \"9123d45e-8d11-455c-891b-ad7e72088c8e\", \"type\": \"code\", \"value\": {\"code\": \"<!-- will add classes to the HTML tags -->\\r\\n{{ value|f_richtext:\\\"framework\\\" }}\\r\\n\\r\\n<!-- will add inline styles to the HTML tags -->\\r\\n{{ value|f_richtext:\\\"inline_styles\\\" }}\", \"language\": \"html\"}}, {\"id\": \"27fe4916-521a-4b1c-a267-34027fd55033\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"6f5gl\\\"><i>You can use it without a parameter</i> <i>{{ page.body|f_richtext }}</i> <i>and it will work just like the Wagtail core provided filter (not required)</i></p><p data-block-key=\\\"4v2l1\\\">Sample framework rendered:</p>\"}, {\"id\": \"5e59332b-563e-41ce-ba8b-847a7fad6485\", \"type\": \"code\", \"value\": {\"code\": \"<div class=\\\"text-component\\\">\\r\\n <p data-block-key=\\\"92eli\\\">A paragraph <b class=\\\"font-bold\\\">Vulputate Vestibulum</b> <i class=\\\"font-italic\\\">Commodo</i></p>\\r\\n <h2 class=\\\"heading-2\\\" data-block-key=\\\"fkden\\\">Heading 2</h2>\\r\\n <ul class=\\\"list list--ul\\\">\\r\\n <li data-block-key=\\\"fe5cv\\\">UL List Item 1</li>\\r\\n <li data-block-key=\\\"6ort3\\\">UL List Item 2</li>\\r\\n </ul>\\r\\n <ol class=\\\"list list--ol\\\">\\r\\n <li data-block-key=\\\"d5s3r\\\">OL List Item 1</li>\\r\\n <li data-block-key=\\\"5l47j\\\">OL List Item 2</li>\\r\\n </ol>\\r\\n <img alt=\\\"IMG_4511\\\" class=\\\"f-richtext-image f-richtext-image--right\\\" height=\\\"375\\\" src=\\\"/media/images/IMG_4511.width-500.jpg\\\" width=\\\"500\\\">\\r\\n <div style=\\\"clear: both;\\\"></div>\\r\\n</div>\", \"language\": \"html\"}}, {\"id\": \"d8781440-cf57-4bd7-91fe-52107d1740da\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"938os\\\">Sample inline styles rendered</p>\"}, {\"id\": \"b904ea93-47cc-49a4-a9d6-3a439cd1e90a\", \"type\": \"code\", \"value\": {\"code\": \"<div style=\\\"overflow:hidden;\\\">\\r\\n <p data-block-key=\\\"92eli\\\" style=\\\"margin-bottom: 1em;\\\">A paragraph <b style=\\\"font-weight: bold;\\\">Vulputate Vestibulum</b> <i style=\\\"font-style: italic;\\\">Commodo</i></p>\\r\\n <h2 data-block-key=\\\"fkden\\\" style=\\\"margin-bottom: 1em;\\\">Heading 2</h2>\\r\\n <ul style=\\\"float: none; clear: both; list-style: disc; margin-left: 2em; margin-bottom: 1em;\\\">\\r\\n <li data-block-key=\\\"fe5cv\\\">UL List Item 1</li>\\r\\n <li data-block-key=\\\"6ort3\\\">UL List Item 2</li>\\r\\n </ul>\\r\\n <ol style=\\\"float: none; clear: both; list-style: decimal; margin-left: 2em; margin-bottom: 1em;\\\">\\r\\n <li data-block-key=\\\"d5s3r\\\">OL List Item 1</li>\\r\\n <li data-block-key=\\\"5l47j\\\">OL List Item 2</li>\\r\\n </ol>\\r\\n <img alt=\\\"IMG_4511\\\" class=\\\"richtext-image right\\\" height=\\\"375\\\" src=\\\"/media/images/IMG_4511.width-500.jpg\\\" style=\\\"float: right; margin-left: 1rem; margin-right: 0; margin-bottom: 1rem; height: auto;\\\" width=\\\"500\\\">\\r\\n <div style=\\\"clear: both;\\\"></div>\\r\\n</div>\", \"language\": \"html\"}}, {\"id\": \"648be6f5-e862-4a5d-9eb3-50a5bccaed6c\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"b9vdu\\\">Configuration</h2><p data-block-key=\\\"dn5vr\\\">You need to add one or both of these settings to your apps settings.</p><ul><li data-block-key=\\\"3iv53\\\">F_RICHTEXT_FRAMEWORK_CONFIG</li><li data-block-key=\\\"2755j\\\">F_RICHTEXT_INLINE_CONFIG</li></ul><h3 data-block-key=\\\"9ovvc\\\">Example for adding classes to HTML tags</h3>\"}, {\"id\": \"c228fdb7-a942-4b10-a137-d7fc3a6a71d7\", \"type\": \"code\", \"value\": {\"code\": \"F_RICHTEXT_FRAMEWORK_CONFIG = {\\r\\n # target html tags\\r\\n \\\"classes\\\": {\\r\\n   \\\"h1\\\": \\\"heading-1\\\",\\r\\n   \\\"h2\\\": \\\"heading-2\\\",\\r\\n    \\\"ul\\\": \\\"list list--ul\\\",\\r\\n   \\\"ol\\\": \\\"list list--ol\\\",\\r\\n   \\\"a\\\": \\\"color-contrast-higher\\\",\\r\\n   \\\"b\\\": \\\"font-bold\\\",\\r\\n   \\\"i\\\": \\\"font-italic\\\",\\r\\n },\\r\\n # wrap the richtext content with a class\\r\\n \\\"wrapper_classes\\\": [\\r\\n   \\\"text-component\\\",\\r\\n ],\\r\\n # swap the richtext image alignment classes\\r\\n \\\"alignment_classes\\\": {\\r\\n   \\\"richtext-image left\\\": \\\"f-richtext-image f-richtext-image--left\\\",\\r\\n   \\\"richtext-image right\\\": \\\"f-richtext-image f-richtext-image--right\\\",\\r\\n   \\\"richtext-image full-width\\\": \\\"margin: 1em 0; width: 100%; height: auto;\\\",\\r\\n },\\r\\n # remove any empty HTML tags (blank lines in the richtext editor)\\r\\n \\\"remove_empty_tags\\\": [\\r\\n  \\\"p\\\",\\r\\n ],\\r\\n # add a clearfix to the end of the content\\r\\n \\\"append_clearfix\\\": True,\\r\\n}\", \"language\": \"python\"}}, {\"id\": \"0823824f-5900-4d66-aa72-97e27ac7ea2e\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"588ok\\\">Example for adding inline styles</h3>\"}, {\"id\": \"f180ed1a-8d1b-4ebf-ac5f-972f8a961591\", \"type\": \"code\", \"value\": {\"code\": \"F_RICHTEXT_INLINE_CONFIG = {\\r\\n # target html tags\\r\\n \\\"styles\\\": {\\r\\n   \\\"h1\\\": \\\"margin-bottom: 1em;\\\",\\r\\n   \\\"h2\\\": \\\"margin-bottom: 1em;\\\",\\r\\n   \\\"h3\\\": \\\"margin-bottom: 1em;\\\",\\r\\n   \\\"h4\\\": \\\"margin-bottom: 1em;\\\",\\r\\n   \\\"h5\\\": \\\"margin-bottom: 1em;\\\",\\r\\n   \\\"h6\\\": \\\"margin-bottom: 1em;\\\",\\r\\n   \\\"p\\\": \\\"margin-bottom: 1em;\\\",\\r\\n   \\\"ul\\\": \\\"float: none; clear: both; list-style: disc; margin-left: 2em; margin-bottom: 1em;\\\",\\r\\n   \\\"ol\\\": \\\"float: none; clear: both; list-style: decimal; margin-left: 2em; margin-bottom: 1em;\\\",\\r\\n   \\\"code\\\": \\\"font-family: monospace; background-color: #f5f5f5; padding: 0.25rem 0.5rem;\\\",\\r\\n   \\\"sub\\\": \\\"vertical-align: sub; font-size: smaller;\\\",\\r\\n   \\\"sup\\\": \\\"vertical-align: super; font-size: smaller;\\\",\\r\\n   \\\"div\\\": \\\"float: none; clear: both;\\\",\\r\\n   \\\"iframe\\\": \\\"max-width: 100%; width: 720px; height: 400px; margin-top: 1em; margin-bottom: 1em;\\\",\\r\\n   \\\"b\\\": \\\"font-weight: bold;\\\",\\r\\n   \\\"i\\\": \\\"font-style: italic;\\\",\\r\\n },\\r\\n # wrap the richtext content with a style\\r\\n \\\"wrapper_styles\\\": [\\r\\n   \\\"overflow:hidden;\\\",\\r\\n ],\\r\\n # swap the richtext image alignment classes for an inline style\\r\\n \\\"alignment_styles\\\": {\\r\\n   \\\"richtext-image left\\\": \\\"float: left; margin-right: 1rem; margin-left: 0; margin-bottom: 1rem; height: auto;\\\",\\r\\n   \\\"richtext-image right\\\": \\\"float: right; margin-left: 1rem; margin-right: 0; margin-bottom: 1rem; height: auto;\\\",\\r\\n   \\\"richtext-image full-width\\\": \\\"margin: 1em 0; width: 100%; height: auto;\\\",\\r\\n },\\r\\n # remove any empty HTML tags (blank lines in the richtext editor)\\r\\n \\\"remove_empty_tags\\\": [\\r\\n   \\\"p\\\",\\r\\n ],\\r\\n # add a clearfix to the end of the content\\r\\n \\\"append_clearfix\\\": True,\\r\\n}\", \"language\": \"python\"}}, {\"id\": \"db18cca7-c24e-44b1-b743-f577cf44208e\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"9r5bk\\\">Optional</h2><h3 data-block-key=\\\"1a1b1\\\">Use your own parser class</h3><p data-block-key=\\\"umdb\\\">The parser class can be extended to add your own parsing requirements.</p><p data-block-key=\\\"bf3q1\\\">Create your own class that inherits from <a href=\\\"https://github.com/wagtail-packages/wagtail-f-richtext/blob/release/wagtail_f_richtext/parser.py\\\">fRichTextParser</a> and add the following to your apps settings.</p>\"}, {\"id\": \"25ff7112-2e8a-43de-8649-ca77d320c5de\", \"type\": \"code\", \"value\": {\"code\": \"F_RICHTEXT_PARSER_CLASS=\\\"the.dotted.path.to.your.own.Class\\\"\", \"language\": \"python\"}}, {\"id\": \"bef7429f-d079-4dbe-866a-6ed0b2496b2c\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"h1i7\\\">Use your own runner function</h3><p data-block-key=\\\"btaqf\\\">The order of the parsing and loading of your configuration is done in the runner method that is called by the f_richtext filter.</p><p data-block-key=\\\"1ouii\\\">Create your own <a href=\\\"https://github.com/wagtail-packages/wagtail-f-richtext/blob/release/wagtail_f_richtext/parser.py#L102\\\">runner function</a> in a suitable place and add the following settings to your app.</p>\"}, {\"id\": \"daebb110-677b-432b-be80-d7e1056b4896\", \"type\": \"code\", \"value\": {\"code\": \"F_RICHTEXT_PARSER_RUNNER=\\\"the.dotted.path.to.your.own.function\\\"\", \"language\": \"python\"}}]",
    "date": "2023-09-01",
    "excerpt": "Parses the content in a RichText field in the same way the Wagtail richtext filter works and add classes or inline styles to the HTML.",
    "pypi_package_name": "wagtail-f-richtext"
  }
},
{
  "model": "pages.packagepage",
  "pk": 32,
  "fields": {
    "body": "[{\"id\": \"a1707bb3-8296-427d-b96d-89f481a11947\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"pltev\\\"><b><i>Under development</i></b></p><p data-block-key=\\\"ev492\\\">An admin interface to choose google street view imagery and display an embedded virtual tour.</p><p data-block-key=\\\"213od\\\">Powered by <a href=\\\"https://developers.google.com/maps/documentation/javascript\\\">google maps Javascript API</a> and <a href=\\\"https://wagtail.org/\\\">Wagtail CMS</a></p>\"}, {\"id\": \"1f4b1b74-f34e-49e7-ae0e-45a46a063f9f\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"pltev\\\">Installation</h2><p data-block-key=\\\"9bm0b\\\">Install the package:</p>\"}, {\"id\": \"57b1b85c-4822-49d4-bdf0-fc955d92f3f9\", \"type\": \"code\", \"value\": {\"code\": \"pip install git+https://github.com/wagtail-packages/wagtail-360@main\", \"language\": \"bash\"}}, {\"id\": \"cdb7a7d6-e0ea-4af8-81d7-429a5eaac8be\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"636lp\\\">Then add wagtail_360 to your installed apps:</p>\"}, {\"id\": \"46b922b5-b607-45d7-806c-babd27cf1480\", \"type\": \"code\", \"value\": {\"code\": \"INSTALLED_APPS = [\\r\\n    # ...\\r\\n    \\\"wagtail_360\\\",\\r\\n    # ...\\r\\n]\", \"language\": \"python\"}}, {\"id\": \"aa17ec4d-d7dd-4b4b-90c9-61e64c61869f\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"6r6sm\\\">Usage</h2><p data-block-key=\\\"91v4c\\\">Add 2 page models.</p><h3 data-block-key=\\\"6l22k\\\">The Tour Index Page</h3><p data-block-key=\\\"b61t1\\\">This represents a virtual tour and is the parent page for each Panorama in this tour.</p>\"}, {\"id\": \"47777891-2de4-4df2-b28a-2d129ba19b2b\", \"type\": \"code\", \"value\": {\"code\": \"from wagtail_360.abstract_models import AbstractTour\\r\\n\\r\\nclass TourPage(AbstractTour, Page):\\r\\n    subpage_types = [\\\"PanoramaPage\\\"]\\r\\n    content_panels = Page.content_panels + [AbstractTour.panels]\", \"language\": \"python\"}}, {\"id\": \"d3cd0b74-383b-4641-9029-aa2df7090c6e\", \"type\": \"rich_text\", \"value\": \"<h3 data-block-key=\\\"89pct\\\">The Panorama Page Model</h3><p data-block-key=\\\"1ukmu\\\">This represents a single panorama and is used as a child page of a TourPage.</p>\"}, {\"id\": \"282cb24f-4bfc-41dd-bdc4-8fb456f1a82b\", \"type\": \"code\", \"value\": {\"code\": \"from wagtail_360.abstract_models import AbstractPanorama\\r\\n\\r\\nclass PanoramaPage(AbstractPanorama):\\r\\n    parent_page_types = [\\\"TourPage\\\"]\\r\\n    content_panels = Page.content_panels + AbstractPanorama.panels\", \"language\": \"python\"}}, {\"id\": \"b59cbf0f-a2d1-4283-ad7a-10d493b13897\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"a40qq\\\">Then run:</p>\"}, {\"id\": \"35ca38e5-500a-431c-b4ba-07bd3aadb8f6\", \"type\": \"code\", \"value\": {\"code\": \"python manage.py makemigrations\\r\\npython manage.py migrate\", \"language\": \"bash\"}}, {\"id\": \"f540159a-11a4-4ea8-b8e0-bbad6cce120a\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"ftgtp\\\">Configuration</h2><p data-block-key=\\\"2ue3t\\\">Set the configuration in your settings.py file</p><p data-block-key=\\\"19i8j\\\">A google maps API key is required. You can generate one at <a href=\\\"https://developers.google.com/maps/documentation/javascript\\\">https://developers.google.com/maps/documentation/javascript</a></p><p data-block-key=\\\"9na3m\\\">The service isn&#x27;t free but there&#x27;s a generous free tier available.</p>\"}, {\"id\": \"d7a2b052-a318-4e10-9944-8797238c4fdf\", \"type\": \"code\", \"value\": {\"code\": \"GOOGLE_MAPS_API_KEY = \\\"your-google-maps-api-key\\\"\", \"language\": \"python\"}}, {\"id\": \"66f354d3-b300-4933-a583-3b854da20713\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"8jqns\\\"><i>If you don&#x27;t set the key the panorama images will still display but will be in developer mode.</i></p>\"}]",
    "date": "2023-09-02",
    "excerpt": "An admin interface to choose google street view imagery and display an embedded virtual tour.",
    "pypi_package_name": ""
  }
},
{
  "model": "pages.packagepage",
  "pk": 38,
  "fields": {
    "body": "[{\"id\": \"8c314fbf-4ae1-46e8-8ebc-4a74e78dd30c\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"umtjb\\\">Wagtail Exposapi is a Wagtail plugin that provides a JSON API for your Wagtail sites internals.</h2><p data-block-key=\\\"fdlpi\\\">Installation and usage details can be read here: <a href=\\\"https://github.com/wagtail-packages/wagtail-exposapi\\\">https://github.com/wagtail-packages/wagtail-exposapi</a></p><p data-block-key=\\\"fvc24\\\">This is a re-work of the <a id=\\\"34\\\" linktype=\\\"page\\\">Response Checker</a> I created earlier and that command is still available in this package.</p><p data-block-key=\\\"7aor\\\">I have also created a stand alone click cli package that can be used in place of the command. <a href=\\\"https://github.com/nickmoreton/wagtail-devtools-cli\\\">CLI on github</a></p><h2 data-block-key=\\\"edsds\\\">Usage Suggestion</h2><p data-block-key=\\\"38aku\\\">When installed a JSON API view will list all:</p><ul><li data-block-key=\\\"832hp\\\">admin listing page urls.</li><li data-block-key=\\\"6addd\\\">at least one of all edit page urls for installed Wagtail core apps.</li><li data-block-key=\\\"agc5k\\\">at least one of all edit page type urls for your own models in installed apps.</li><li data-block-key=\\\"7dumf\\\">at least one of all page type views for your own models in installed apps.</li></ul><p data-block-key=\\\"e8gsa\\\">It does this with zero configuration. If need be you can provided configuration to exclude models or apps or provide a full list of apps/models to work with.</p><p data-block-key=\\\"em6sa\\\">With this information it&#x27;s possible to make a get request to each URL and check the response using various external tools or scripts e.g.</p><ul><li data-block-key=\\\"3sja\\\">use a tool like Postman to check the responses.</li><li data-block-key=\\\"1sool\\\">create a script to check the responses.</li><li data-block-key=\\\"8vajh\\\">use a monitoring service to check the responses.</li><li data-block-key=\\\"f6o30\\\">use a CI/CD pipeline to check the responses.</li><li data-block-key=\\\"dnb01\\\">and so on.</li></ul>\"}, {\"id\": \"8aae95be-2a54-44ee-a73e-2ae079501c0d\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"umtjb\\\">Included Base Command</h2><p data-block-key=\\\"et15f\\\">The package includes a base command that you can extend in your own site to fetch the API data and check the responses while developing your site.</p><p data-block-key=\\\"8nn9n\\\">This is especially useful if you have upgraded your wagtail site to a new version and want to make sure you&#x27;ve covered the upgrade points around views and templates.</p><p data-block-key=\\\"2cf89\\\">The default behaviour is to report any urls that return a response code other than 200.</p><p data-block-key=\\\"9mafs\\\">You can add options to see more details: --expanded includes the 200 responses in the output, --all includes all responses endpoints in a site (could be slow depending the size of the size).</p><p data-block-key=\\\"fbo9g\\\">The command needs to be able to login to the site so you need to provide a --username, --password and --url and --login-path, the defaults are superuser for the username and password and http://localhost:8000 for the url and /admin/login/ for the login path.</p><p data-block-key=\\\"8grbr\\\">Create a new command in your site that extends BaseResponsesCommand.</p>\"}, {\"id\": \"7264100a-7512-4449-bf88-373fea2202da\", \"type\": \"code\", \"value\": {\"code\": \"from exposapi.responses_command import BaseResponsesCommand\\r\\n\\r\\nclass Command(BaseResponsesCommand):\\r\\n    pass\", \"language\": \"python\"}}, {\"id\": \"4885b2c5-17ef-47a8-b0ab-100beafe39c8\", \"type\": \"rich_text\", \"value\": \"<p data-block-key=\\\"umtjb\\\">For convenience you can add default options to the command so you don&#x27;t need to type them each time you run the command.</p>\"}, {\"id\": \"4b4364e8-d143-4df8-8b8d-fd35c6c4a446\", \"type\": \"code\", \"value\": {\"code\": \"class Command(BaseResponsesCommand):\\r\\n    # you might want to fetch these from environment variables\\r\\n    username = \\\"your-login-username\\\"\\r\\n    password = \\\"your-login-password\\\"\\r\\n    url = \\\"http://localhost:8000\\\"  # the base url of your site\\r\\n    login_path = \\\"/admin/login/\\\"  # the login url for your site\", \"language\": \"python\"}}, {\"id\": \"189efce4-98e3-4378-9f7e-d51788cf4631\", \"type\": \"rich_text\", \"value\": \"<h2 data-block-key=\\\"umtjb\\\">Configuration</h2><p data-block-key=\\\"7pm09\\\">If you want to customise the introspection you can provide the configuration shown below.</p>\"}, {\"id\": \"387ffb35-bf15-4143-b2d7-c36b6238e08d\", \"type\": \"code\", \"value\": {\"code\": \"EXPOSAPI_CONFIG = {\\r\\n    \\\"base_url\\\": \\\"http://localhost:8000\\\",\\r\\n    \\\"listing_exclude\\\": [\\r\\n        \\\"wagtailimages\\\",\\r\\n        ...,  # these apps won't be included in the listing pages\\r\\n    ],\\r\\n    \\\"listing_pages_config\\\": [\\r\\n        {\\r\\n            \\\"title\\\": \\\"Search promotions\\\",\\r\\n            \\\"app_name\\\": \\\"wagtailsearchpromotions\\\",\\r\\n            \\\"listing_name\\\": \\\"wagtailsearchpromotions:index\\\",\\r\\n        },\\r\\n        {\\r\\n            \\\"title\\\": \\\"Forms\\\",\\r\\n            \\\"app_name\\\": \\\"wagtailforms\\\",\\r\\n            \\\"listing_name\\\": \\\"wagtailforms:index\\\",\\r\\n        },\\r\\n        ...,  # these will override the introspection for the listing pages\\r\\n    ],\\r\\n    \\\"apps_exclude\\\": [\\r\\n        \\\"wagtailimages\\\",\\r\\n        ...,  # these apps won't be included in the edit pages\\r\\n    ],\\r\\n}\", \"language\": \"python\"}}]",
    "date": "2024-02-17",
    "excerpt": "A JSON API to expose your Wagtail sites internals",
    "pypi_package_name": "wagtail-exposapi"
  }
}
]
